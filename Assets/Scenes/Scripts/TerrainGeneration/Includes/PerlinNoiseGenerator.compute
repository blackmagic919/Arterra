
#include "/Noise.compute"

//Noise
uint chunkSize;
uint octaves;
uint meshSkipInc;
StructuredBuffer<float3> offsets;
float persistence;
float lacunarity;
float noiseScale;
float maxPossibleHeight;

float GetNoise(uint3 id) {
    float center = chunkSize / 2;

    uint x = id.x * meshSkipInc;
    uint y = id.y * meshSkipInc;
    uint z = id.z * meshSkipInc;

    float amplitude = 1;
    float frequency = 1;
    float noiseHeight = 0;
                    
    for(uint i = 0; i < octaves; i++)
    {
        float sampleX = (x-center + offsets[i].x) / noiseScale * frequency;
        float sampleY = (y-center + offsets[i].y) / noiseScale * frequency;
        float sampleZ = (z-center + offsets[i].z) / noiseScale * frequency;

        float perlinValue = snoise(float3(sampleX, sampleY, sampleZ)); //Default range -1 to 1
        noiseHeight += perlinValue * amplitude;
        
        amplitude *= persistence; //amplitude decreases -> effect of samples decreases 
        frequency *= lacunarity; //frequency increases -> size of noise sampling increases -> more random
    }
    return (noiseHeight + 1) / (maxPossibleHeight / 0.9);
}