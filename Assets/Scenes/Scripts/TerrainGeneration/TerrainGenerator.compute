#pragma kernel GenerateFull

#include "/Includes/GetIndex.compute"
#include "/Includes/PerlinNoiseGenerator.compute"

const static int numThreads = 8;

float offsetY;
float depth;
float IsoLevel;
RWStructuredBuffer<float> points;

float clamp(float val, float a, float b){
    float ret = val;
    if(val < a){
        ret = a;
    }
    if(b < val){
        ret = b;
    }
    return ret;
}

[numthreads(numThreads,numThreads,numThreads)]
void GenerateFull (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    uint y = id.y * meshSkipInc;
    float halfHeight = chunkSize / 2;
    uint index = indexFromCoord(id.x,id.y,id.z);

    float underground = points[index];
    float surface = GetNoise(id);
    
    float actualHeight = y - halfHeight + offsetY;
    float clampedHeight = clamp(actualHeight, (-1) * depth, depth);
    float disToSurface = (surface * depth + clampedHeight) / depth;

    points[index] = min(clamp(((-1) * disToSurface + IsoLevel), 0, 1), underground);
}