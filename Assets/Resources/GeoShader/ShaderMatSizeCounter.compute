// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

const static int numThreads = 256;

struct matTerrain{
    float4 baseColor;
    float baseTextureScale;
    float baseColorStrength;
    int geoShaderInd;
};

struct vertex{
    float3 tri;
    float3 norm;
    int2 material; 
};

struct pInfo{
    uint axis[3];
};


StructuredBuffer<matTerrain> _MatTerrainData;

StructuredBuffer<vertex> vertices;
StructuredBuffer<pInfo> triangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

StructuredBuffer<uint> counter;
RWStructuredBuffer<uint> triangleIndexOffset; //This is to facilitate parallelization
RWStructuredBuffer<uint> shaderIndexOffset; //This ensures vertexes are sorted by shader
uint bSTART_scount;
uint bSTART_tri;
uint bCOUNTER_base;


[numthreads(numThreads,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= counter[bCOUNTER_base])
        return;

    triangleIndexOffset[bSTART_tri + id.x] = -1; 

    //Each triangle will have 3 materials, take the minimum shader index
    uint shaderIndex = asuint(-1);
    pInfo vIndex = triangles[_AddressDict[triAddress].y + id.x];
    [unroll] for(uint i = 0; i < 3; i++) {
        int material = vertices[_AddressDict[vertAddress].y + vIndex.axis[i]].material.x; // Only consider solid material
        shaderIndex = min(shaderIndex, asuint(_MatTerrainData[material].geoShaderInd));
    }

    if(shaderIndex != asuint(-1)) InterlockedAdd(shaderIndexOffset[bSTART_scount + shaderIndex + 1], 1, triangleIndexOffset[bSTART_tri + id.x]);
}
