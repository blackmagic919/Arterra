// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
const static uint numthreads = 64;

RWStructuredBuffer<uint> _SourceMemory;
StructuredBuffer<uint2> _AddressDict;
uint addressIndex;
uint freeCount;
uint freeStride;
uint workerCount;

[numthreads(numthreads,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= workerCount)
        return;
    if(_AddressDict[addressIndex].x == 0 || freeCount == 0)
        return;

    uint start = _AddressDict[addressIndex].y * freeStride;
    uint count = freeCount * freeStride;

    if(id.x < count % workerCount)
        _SourceMemory[count - id.x] = 0;

    count = count / workerCount;
    start = start + id.x * count;

    for(uint i = 0; i < count; i++)
    {
        _SourceMemory[start + i] = 0;
    }
}
