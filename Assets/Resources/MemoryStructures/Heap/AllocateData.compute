// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma multi_compile _ DIRECT_ALLOCATE

const static uint InitBlockSize = 3;

RWStructuredBuffer<uint> _SourceMemory;
RWStructuredBuffer<uint2> _Heap;

StructuredBuffer<uint> allocSizeBuffer;

//OUTPUT
#ifdef DIRECT_ALLOCATE
RWStructuredBuffer<uint> _Address;

#else
RWStructuredBuffer<uint> _AddressDict;
uint addressIndex;

#endif


void Swap(uint a, uint b){
    uint2 temp = _Heap[a];
    _Heap[a] = _Heap[b];
    _Heap[b] = temp;

    //Update Linked List for positions
    _SourceMemory[_Heap[a].x - 2] = a;
    _SourceMemory[_Heap[b].x - 2] = b;
}

void SinkBlock(uint node){
    while(2*node <= _Heap[0].x){
        uint maxChild = 2*node;
        if(2*node + 1 <= _Heap[0].x && _Heap[2*node + 1].y > _Heap[maxChild].y)
            maxChild = 2*node + 1;

        if(_Heap[node].y >= _Heap[maxChild].y)
            break;

        Swap(node, maxChild);
        node = maxChild;
    }
}
//Allocate at smallest(not guaranteed) block to prevent memory fracture
//The use of this makes the exact focus of the heap ambiguous
uint FindSmallestBlock(uint node, uint size){
    while(2*node <= _Heap[0].x){
        uint maxChild = 2*node;
        if(2*node + 1 <= _Heap[0].x && _Heap[2*node + 1].y > _Heap[maxChild].y)
            maxChild = 2*node + 1;
        
        if(size > _Heap[maxChild].y)
            break;
        
        node = maxChild;
    }
    return node;
}

//Time Complexity: O(log n)
[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint allocSize = allocSizeBuffer[0];

    //Don't allocate 0 size blocks
    if(allocSize == 0 || allocSize + InitBlockSize > _Heap[1].y){
#ifdef DIRECT_ALLOCATE
        _Address[0] = 0; //INDICATE NOT ALLOCATED
#else
        _AddressDict[addressIndex] = 0; //INDICATE NOT ALLOCATED
#endif
        return; 
    }

    uint rNode = FindSmallestBlock(1u, allocSize + InitBlockSize);
    uint2 root = _Heap[rNode];
    uint rAddress = root.x;
    uint rBlockSize = root.y;

#ifdef DIRECT_ALLOCATE
    _Address[0] = rAddress;
#else
    _AddressDict[addressIndex] = rAddress;
#endif

    //Set Alloc Block's Info
    _SourceMemory[rAddress - 2] = 0; //0 bit pattern means ISALLOCATED
    _SourceMemory[rAddress - 1] = allocSize;
    _SourceMemory[rAddress + allocSize] = allocSize;

    //Create new empty block
    uint address = rAddress + (allocSize + InitBlockSize);
    uint blockSize = rBlockSize - (allocSize + InitBlockSize);

    _Heap[rNode] = uint2(address, blockSize);
    _SourceMemory[address-2] = rNode;
    _SourceMemory[address-1] = blockSize;
    _SourceMemory[address + blockSize] = blockSize;

    SinkBlock(rNode);
}
