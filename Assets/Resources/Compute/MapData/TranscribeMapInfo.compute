// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TranscribeMap
#pragma kernel TranscribeFaces

const static uint numThreads = 8;
const static int POINT_STRIDE_4BYTE = 1;


RWStructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<uint2> _AddressDict;
uint addressIndex;

StructuredBuffer<uint> chunkData;//
uint bSTART_read;

uint sizeWrAxis;
uint sizeRdAxis;
//Means square read offset in Transcribe Map(read in chunk may include OOB edges)
//Means write offset in Transcribe Faces(write out chunk may include seperate chunk beforehand)
uint offset;


[numthreads(numThreads,numThreads,numThreads)]
void TranscribeMap (uint3 id : SV_DispatchThreadID)
{
    if(_AddressDict[addressIndex].x == 0) //Invalid
        return;

    if(id.x >= sizeWrAxis || id.y >= sizeWrAxis || id.z >= sizeWrAxis)
        return;
    
    uint wAddress = id.x * sizeWrAxis * sizeWrAxis + id.y * sizeWrAxis + id.z;
    int3 rdPos = int3(id.x, id.y, id.z) + offset;
    uint readAdd = rdPos.x * sizeRdAxis * sizeRdAxis + rdPos.y * sizeRdAxis + rdPos.z;

    wAddress += _AddressDict[addressIndex].y;
    _MemoryBuffer[wAddress] = chunkData[readAdd + bSTART_read];
}


const static uint3x3 rAxis[3] = {
    {0, 0, 1, 1, 0, 0, 0, 1, 0}, //YZ-Plane(ZXY)
    {1, 0, 0, 0, 0, 1, 0, 1, 0}, //XZ-Plane(XZY)
    {1, 0, 0, 0, 1, 0, 0, 0, 1}  //XY-Plane(XYZ)
};
const static uint1x2 rPlane[3] = {
    {0, 0}, {1, -2}, {1, -1}
};

//offset here means write offset
[numthreads(numThreads,numThreads,9)]
void TranscribeFaces (uint3 id : SV_DispatchThreadID)
{
    if(_AddressDict[addressIndex].x == 0) //Invalid
        return;

    if(id.x >= sizeWrAxis || id.y >= sizeWrAxis)
        return;
    
    uint wAddress = id.z * sizeWrAxis * sizeWrAxis + offset;
    wAddress += id.x * sizeWrAxis + id.y;
    wAddress += _AddressDict[addressIndex].y;

    int plane = mul(rPlane[id.z % 3], int2(sizeRdAxis, 1));
    int3 rdPos = mul(rAxis[id.z / 3], int3(id.x, id.y, plane));
    uint readAdd = rdPos.x * sizeRdAxis * sizeRdAxis + rdPos.y * sizeRdAxis + rdPos.z;

    _MemoryBuffer[wAddress] = chunkData[readAdd + bSTART_read];
}


