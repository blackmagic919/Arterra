// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

const static uint numThreads = 8;
const static int POINT_STRIDE_4BYTE = 1;


RWStructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<uint2> _AddressDict;
uint addressIndex;

StructuredBuffer<uint> chunkData;//
uint bSTART_read;

uint sizeWrAxis;
uint sizeRdAxis;
uint sqRdOffset;


[numthreads(numThreads,numThreads,numThreads)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(_AddressDict[addressIndex].x == 0) //Invalid
        return;

    if(id.x >= sizeWrAxis || id.y >= sizeWrAxis || id.z >= sizeWrAxis)
        return;
    
    uint wAddress = id.x * sizeWrAxis * sizeWrAxis + id.y * sizeWrAxis + id.z;
    int3 rdPos = int3(id.x, id.y, id.z) + sqRdOffset;
    uint readAdd = rdPos.x * sizeRdAxis * sizeRdAxis + rdPos.y * sizeRdAxis + rdPos.z;

    wAddress += _AddressDict[addressIndex].y;
    _MemoryBuffer[wAddress] = chunkData[readAdd + bSTART_read];
}
