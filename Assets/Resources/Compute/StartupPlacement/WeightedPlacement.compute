#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/MapData/CCoordHash.hlsl"
#pragma kernel WeightedPlace
#pragma kernel FindSmallest
const static uint numThreads = 8;

struct entityCheck{
    uint bounds;// upper_vis, low_vis, upper_dens, low_dens
    uint flags;
};

struct entityBound{
    uint3 boundSize;
    uint boundStart;
};

StructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<CInfo> _AddressDict;
StructuredBuffer<entityBound> _EntityInfo;
StructuredBuffer<entityCheck> _EntityProfile;

RWStructuredBuffer<int3> Result;
RWStructuredBuffer<uint> Lock;
uint bSTART;
uint bLOCK; //Lock to get the smallest coord

uint SearchRadius;
uint ProfileEntity;
int3 SearchCenter;

int mapChunkSize;


//max 8 values
uint GetSignEncoding(int3 c, uint select = 7)
{
    uint off = 0; int shift = 0;
    if ((select & 0x1) != 0){
        off |= c.x < 0 ? (1u << shift) : 0u;
        shift++;
    } if ((select & 0x2) != 0){
        off |= c.y < 0 ? (1u << shift) : 0u;
        shift++;
    } if ((select & 0x4) != 0){
        off |= c.z < 0 ? (1u << shift) : 0u;
        shift++;
    } return off;
}

//max 6 values
uint GetOrderEncoding(int3 aC)
{
    if (aC.x >= aC.z && aC.z >= aC.y) return 0;
    else if (aC.x >= aC.y && aC.y >= aC.z) return 1;
    else if (aC.y >= aC.x && aC.x >= aC.z) return 2;
    else if (aC.y >= aC.z && aC.z >= aC.x) return 3;
    else if (aC.z >= aC.y && aC.y >= aC.x) return 4;
    else return 5; //c.z >= c.y && c.y >= c.x   
}

//Encode such that the smallest(L1 distance) coords to origin(0,0,0) have smallest number
uint DistanceEncode(int3 DCoord)
{
    int3 absCoord = abs(DCoord);
    int majorAxis = max(absCoord.x, max(absCoord.y, absCoord.z));
    int minorAxis = min(absCoord.x, min(absCoord.y, absCoord.z));
    int interAxis = (absCoord.x + absCoord.y + absCoord.z) - (majorAxis + minorAxis);

    uint majorOffset = (uint)max(2 * majorAxis - 1, 0);
    uint interOffset = (uint)max(2 * interAxis - 1, 0);
    uint minorOffset = (uint)max(2 * minorAxis - 1, 0);
    majorOffset = majorOffset * majorOffset * majorOffset;
    interOffset = interOffset * interOffset * 6; 
    if (majorAxis == interAxis) minorOffset *= 12; //12 total cube edges
    else minorOffset *= 24; //6 faces, 4 edges for each square

    uint subOff;
    if (minorAxis == majorAxis){
        if (minorAxis == 0) subOff = 0; //1 Center
        else subOff = GetSignEncoding(DCoord); //8 cube corners
    }else if (majorAxis == interAxis){
        if (minorAxis == 0){ //12 edge centers
            uint mAxisInd = GetOrderEncoding(-absCoord) / 2;
            subOff = GetSignEncoding(DCoord, ~(1u << (int)mAxisInd)) + mAxisInd * 4; 
        } else subOff = GetSignEncoding(DCoord) + (GetOrderEncoding(-absCoord) >> 1) * 8; //24 edge duplicates
    } else if (interAxis == minorAxis){
        if (minorAxis == 0) { //6 Face Center
            int mAxind = (int)GetOrderEncoding(absCoord) / 2;
            subOff = GetSignEncoding(DCoord, 1u << mAxind) + (uint)mAxind * 2; 
        } else subOff = GetSignEncoding(DCoord) + (GetOrderEncoding(absCoord) >> 1) * 8; //24 face corner
    } else {
        if (minorAxis == 0) { //24 face central axis
            int mAxisInd = (int)GetOrderEncoding(-absCoord) / 2;
            subOff = GetSignEncoding(DCoord, ~(1u << mAxisInd)) + GetOrderEncoding(absCoord) * 4; 
        } else subOff = GetSignEncoding(DCoord) + GetOrderEncoding(absCoord) * 8; //48 regular point
    }
    return majorOffset + interOffset + minorOffset + subOff;
}


uint SampleMapData(int3 GCoord){
    int3 MCoord = ((GCoord % mapChunkSize) + mapChunkSize) % mapChunkSize;
    int3 CCoord = (GCoord - MCoord) / mapChunkSize;

    CInfo chunkHandle = _AddressDict[HashCoord(CCoord)];
    if(!Contains(chunkHandle, CCoord))
        return asuint(-1);
    else{
        uint address = chunkHandle.address + indexFromCoord(MCoord);
        return _MemoryBuffer[address];
    }
}

uint density(uint data) { return data & 0x000000FF; }
uint viscosity(uint data) { return (data & 0x0000FF00) >> 8; }
uint material(uint data) { return (data & 0x7FFF0000) >> 16; }
bool InBounds(uint data, uint bounds) { 
    uint density = data & 0xFF; uint viscosity = (data >> 8) & 0xFF;
    return density >= (bounds & 0xFF) && density <= ((bounds >> 8) & 0xFF) && viscosity >= ((bounds >> 16) & 0xFF) && viscosity <= ((bounds >> 24) & 0xFF); 
}

[numthreads(numThreads,numThreads,numThreads)]
void WeightedPlace (uint3 id : SV_DispatchThreadID)
{
    if(any(id >= SearchRadius * 2)) return;
    int3 Position = SearchCenter + (int3)id - (int)SearchRadius;
    entityBound bounds = _EntityInfo[ProfileEntity];
    uint entityLength = bounds.boundSize.x * bounds.boundSize.y * bounds.boundSize.z;

    bool allC = true; bool anyC = false; bool any0 = false;
    for(uint i = 0; i < entityLength; i++){
        int3 offsetCoord = uint3(i / (bounds.boundSize.y * bounds.boundSize.z), 
                                (i / bounds.boundSize.z) % bounds.boundSize.y, 
                                i % bounds.boundSize.z);
        entityCheck check = _EntityProfile[bounds.boundStart + i];

        bool valid = InBounds(SampleMapData(Position + offsetCoord), check.bounds);
        allC = allC && (valid || !(check.flags & 0x1));
        anyC = anyC || (valid && (check.flags & 0x2));
        any0 = any0 || (check.flags & 0x2);
    }  if(!allC || (any0 && !anyC)) return;

    int3 DCoord = ((int3)id) - (int)SearchRadius; //Delta Coord--The delta position from the center
    uint encoding = DistanceEncode(DCoord);
    InterlockedMin(Lock[bLOCK], encoding);
}

[numthreads(numThreads,numThreads,numThreads)]
void FindSmallest (uint3 id : SV_DispatchThreadID){
    if(any(id > SearchRadius * 2)) return;
    int3 DCoord = ((int3)id) - (int)SearchRadius;
    uint encoding = DistanceEncode(DCoord);
    if(Lock[bLOCK] != encoding) return;
    Result[bSTART] = DCoord;
}

