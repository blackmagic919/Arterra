// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

uint indexFromCoord2D(uint x, uint y, uint numPointsPerAxis) {
    return x * numPointsPerAxis + y;
}

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

const static int numThreads = 8;

StructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<uint> _AddressDict;
uint addressIndex;


RWStructuredBuffer<uint> destination;
uint destPointsPerAxis;
uint destSkipInc;

uint sourcePointsPerAxis;
uint sourceSkipInc;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= destPointsPerAxis || id.y >= destPointsPerAxis)
        return;

    int destIndex = indexFromCoord2D(id.x, id.y, destPointsPerAxis);

    int2 sourceCoords = (id.xy * destSkipInc) / sourceSkipInc;
    int sourceIndex = _AddressDict[addressIndex] + indexFromCoord2D(sourceCoords.x, sourceCoords.y, sourcePointsPerAxis);

    destination[destIndex] = _MemoryBuffer[sourceIndex];
}
