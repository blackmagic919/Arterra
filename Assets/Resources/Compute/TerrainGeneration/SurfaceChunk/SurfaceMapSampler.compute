// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/Resources/Compute/TerrainGeneration/SurfaceChunk/SurfBiomeSampler.hlsl"
#include "Assets/Resources/Compute/Utility/PerlinNoiseSampler.hlsl"
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"

uint continentalSampler;
uint PVSampler;
uint erosionSampler;
uint squashSampler;
uint InfHeightSampler;
uint InfOffsetSampler;
uint atmosphereSampler;

float maxInfluenceHeight;
float maxTerrainHeight;
float squashHeight;
float heightOffset;


struct surfData{
    int biome;
    float terrain;
    float squash;
    float atmosphere;
    float InfMax;
    float InfMin;
};

RWStructuredBuffer<surfData> surfMap;

const static int numThreads = 8;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis) {
        return;
    }

    float rawMaps[6];
    rawMaps[1] = GetRawNoise2D(id.xy, erosionSampler);
    rawMaps[2] = GetRawNoise2D(id.xy, squashSampler);

    float erosionNoise = interpolateValue(rawMaps[1], erosionSampler);
    float terrainHeight = GetErodedNoise2D(id.xy, erosionNoise, PVSampler, continentalSampler);
    float squashNoise = interpolateValue(rawMaps[2], squashSampler) * squashHeight;

    surfData data;
    rawMaps[0] = terrainHeight;
    data.terrain = rawMaps[0] * maxTerrainHeight + heightOffset;
    data.squash = squashNoise;

    rawMaps[3] = GetRawNoise2D(id.xy, InfHeightSampler);
    rawMaps[4] = GetRawNoise2D(id.xy, InfOffsetSampler);
    rawMaps[5] = GetRawNoise2D(id.xy, atmosphereSampler);
    
    data.biome = GetBiome(rawMaps);
    float infHeight = interpolateValue(rawMaps[3], InfHeightSampler);
    float infOffset = interpolateValue(rawMaps[4], InfOffsetSampler);

    data.InfMax = maxInfluenceHeight * (infHeight * (1 - infOffset));
    data.InfMin = -maxInfluenceHeight * (infHeight * infOffset);
    data.atmosphere = interpolateValue(rawMaps[5], atmosphereSampler);

    uint index = indexFromCoord2D(id.x, id.y);
    surfMap[index] = data;
}
