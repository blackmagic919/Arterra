// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
const static uint numThreads = 128;
const static uint VERTEX_STRIDE_4BYTES = 3 * 2 + 1;


StructuredBuffer<uint> triDict; //Remapped from uint3
StructuredBuffer<uint3> BaseTriangles; 
StructuredBuffer<uint> counter;
uint bCOUNTER_Tri;
uint bSTART_Tri;
uint bSTART_Dict;

RWStructuredBuffer<uint3> _MemoryBuffer;
StructuredBuffer<uint2> _AddressDict;
uint triAddress;

[numthreads(numThreads,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(_AddressDict[triAddress].x == 0) //Out of space
        return;
    if(id.x >= counter[bCOUNTER_Tri])
        return;

    uint writeAddress = _AddressDict[triAddress].y + id.x;
    uint3 baseTri = BaseTriangles[bSTART_Tri + id.x];
    
    uint3 tri;
    tri.x = triDict[baseTri.x + bSTART_Dict];
    tri.y = triDict[baseTri.y + bSTART_Dict];
    tri.z = triDict[baseTri.z + bSTART_Dict];

    _MemoryBuffer[writeAddress] = tri;
}
