// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MarchTransition
#include "Assets/Resources/Compute/TerrainGeneration/BaseGeneration/TransVoxelTables.hlsl"
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/TerrainGeneration/BaseGeneration/CMapDataSampler.hlsl"

const static int POINT_STRIDE_4BYTE = 2;
//multipled with (u, v, chunkSize)
static const int3x3 ChunkAlign[6] = {
    {0, 0, 0, 1, 0, 0, 0, 1, 0}, //-x, 0XY
    {1, 0, 0, 0, 0, 0, 0, 1, 0}, //-y, X0Y
    {1, 0, 0, 0, 1, 0, 0, 0, 0}, //-z, XY0
    {0, 0, 1, 1, 0, 0, 0, 1, 0}, //+x, ZXY
    {1, 0, 0, 0, 0, 1, 0, 1, 0}, //+y, XZY
    {1, 0, 0, 0, 1, 0, 0, 0, 1}, //+z, XYZ
}; static const int3 ChunkPlane[6] = { 
    {1, 0, 0}, {0, 1, 0}, {0, 0, 1},
    {-1, 0, 0}, {0, -1, 0}, {0, 0, -1}
}; static const uint DictPlane[6][2] = { 
    {1, 2}, {0, 2}, {0, 1},
    {1, 2}, {0, 2}, {0, 1}   
};


struct vertex{
    float3 tri;
    float3 norm;
    int2 material; //x = base, y = water
};

struct pInfo{
    uint axis[3];
};


RWStructuredBuffer<vertex> vertexes;
RWStructuredBuffer<pInfo> triangles;
RWStructuredBuffer<uint> triangleDict;
RWStructuredBuffer<uint> counter;
uint3 counterInd; //x -> vertex, y -> baseTri, z -> waterTri
uint bSTART_dict;
uint bSTART_verts;
uint bSTART_baseT;
uint bSTART_waterT;


struct GridFace{
    Corner corners[9];
};


GridFace ReadGrid(int2 coord, int skip, int align){
    GridFace face;
    [unroll]for(int i = 0; i < 9; i++){
        int3 sCoord = int3(coord + positionFromIndex[i].xy * skip, numCubesPerAxis);
        uint mapData = ReadMapData(mul(ChunkAlign[align], sCoord));
        face.corners[i] = SampleStateInfo(mapData);
    } return face;
}

struct FaceInfo{
    float transWidth;
    float transStart;
    uint dictStart;
    uint data;
};

StructuredBuffer<FaceInfo> FaceProperty;
uint numTransFaces;

int Align(int data){ return data & 0xFF; }
int SkipInc(int data){ return (data >> 8) & 0xFF; }
bool IsEnd(int data){ return (data & 0x80000000) != 0; }
bool MergeFace(int data){ return (data & 0x40000000) != 0; }
float Interpolate(float p1Val, float p2Val) { return ((IsoLevel - p1Val) / (p2Val - p1Val + Epsilon.x));  }

void AddVertices(int2 coordUV, int caseIndex, uint state, in GridFace face, in FaceInfo info){
    uint CClass = CellClass(caseIndex);
    uint count = VertexCount(CClass); 
    for (uint i = 0; i < count; i++) {
        uint edgeIndex = Vertices(caseIndex, i);
        int3 pInd = cornerIndexFromEdge[edgeIndex];
        int3 cornerP1 = positionFromIndex[pInd.x];
        int3 cornerP2 = positionFromIndex[pInd.y];
        
        int dictHash = indexFromCoord2D(coordUV + cornerP1.xy * SkipInc(info.data));
        if(IsEnd(info.data) && pInd.x == 9) dictHash += numPointsPerAxis * numPointsPerAxis; //go to next face dict
        else if(((SaveVertex >> pInd.x) & 0x1) == 0) continue; //Duplicate Vertex

        //Map position where the corner is sampled
        int3 p1 = mul(ChunkAlign[Align(info.data)], int3(coordUV + cornerP1.xy * SkipInc(info.data), numCubesPerAxis));
        int3 p2 = mul(ChunkAlign[Align(info.data)], int3(coordUV + cornerP2.xy * SkipInc(info.data), numCubesPerAxis));

        if(any(p2 >= (int)numPointsPerAxis)) continue; //Out of Bounds

        vertex newVert;
        //Get point densities
        float p1Val = face.corners[GridCorner[pInd.x]].density[state];
        float p2Val = face.corners[GridCorner[pInd.y]].density[state];
        float interpFactor = Interpolate(p1Val, p2Val);

        //The actual position of the corner
        float3 p1Pos = p1; float3 p2Pos = p2;
        p1Pos += (info.transStart - cornerP1.z * info.transWidth) * ChunkPlane[Align(info.data)];
        p2Pos += (info.transStart - cornerP2.z * info.transWidth) * ChunkPlane[Align(info.data)];
        newVert.tri = p1Pos + interpFactor * (p2Pos - p1Pos);

        newVert.norm = GetVertexNormal(p1, DictPlane[Align(info.data)][pInd.z], interpFactor, state);
        if((p1Val > p2Val) ^ (state != 0)) newVert.material = uint2(face.corners[GridCorner[pInd.x]].material, face.corners[GridCorner[pInd.y]].material);
        else newVert.material = uint2(face.corners[GridCorner[pInd.y]].material, face.corners[GridCorner[pInd.x]].material);

        //Append Vertex
        int appendInd = 0;
        InterlockedAdd(counter[counterInd.x], 1, appendInd);
        vertexes[bSTART_verts + appendInd] = newVert;

        //Set To Dictionary
        triangleDict[2 * dictHash + info.dictStart + pInd.z + bSTART_dict] = appendInd;
        if(MergeFace(info.data) && ((SaveVertex >> pInd.x) & 0x1)){
            //Stitch the vertex to the base mesh data
            triangleDict[3 * indexFromCoord(p1) + DictPlane[Align(info.data)][pInd.z] + bSTART_dict] = appendInd;
        }
    }
}

//info.x -> buffer start, info.y -> counter index, info.z -> dictionary address
void AddTriangulation(int2 coordUV, int caseIndex, int2 offset, in FaceInfo info){
    uint CClass = CellClass(caseIndex); 
    uint count = TriangleCount(CClass); 
    for (uint i = 0; i < count; i++) {
        pInfo baseTri;
        [unroll]for(uint v = 0; v < 3; v++){ //Get the dict index locations of the vertices
            uint vertexIndex = Triangulation(CClass, 3*i + v);
            int3 pInd = cornerIndexFromEdge[Vertices(caseIndex, vertexIndex)];
            int3 cornerP1 = positionFromIndex[pInd.x];
            int dictHash = indexFromCoord2D(coordUV + cornerP1.xy * SkipInc(info.data));
            dictHash += cornerP1.z * (numPointsPerAxis * numPointsPerAxis);
            baseTri.axis[2-v] = 2 * dictHash + info.dictStart + pInd.z;
        }
        //Flip winding if inverted, it's also doubly inverted if 
        // the transition is on the opposing chunk alignment. 
        //NOTE: Fixed condition (~Align(info.data) & 0x1) is correct(don't ask me why tho)
        if(IsInverted(caseIndex) ^ (~Align(info.data) & 0x1)){
            uint temp = baseTri.axis[0];
            baseTri.axis[0] = baseTri.axis[2];
            baseTri.axis[2] = temp;
        }
        
        //Append Base Triangle
        int appendInd = 0;
        InterlockedAdd(counter[offset.y], 1, appendInd);
        triangles[offset.x + appendInd] = baseTri;
    }
}
//This function only consideres edge planes, not their corners
const static int numThreads = 8;
[numthreads(numThreads,numThreads,1)]
void MarchTransition (uint3 id : SV_DispatchThreadID)
{
    if(id.z >= numTransFaces)
        return;
    FaceInfo info = FaceProperty[id.z];
    int2 coordUV = int2(id.x, id.y) * (SkipInc(info.data) << 1);//
    if(any(coordUV >= (int)numPointsPerAxis))
        return;
    
    GridFace face = ReadGrid(coordUV, SkipInc(info.data), Align(info.data));
    uint terrIndex = 0; 
    uint tspIndex = 0;
    uint waterIndex = 0;
    [unroll] for(uint u = 0; u < 9; u++){
        if ((face.corners[WindingOrder[u]].density[0]) < IsoLevel) terrIndex |= (1 << u);
        if ((face.corners[WindingOrder[u]].density[1]) < IsoLevel) waterIndex |= (1 << u);
        if ((face.corners[WindingOrder[u]].density[2]) < IsoLevel) tspIndex |= (1 << u);
    }

    AddVertices(coordUV, waterIndex, SAMPLE_WATER, face, info);
    AddVertices(coordUV, tspIndex, SAMPLE_TSP, face, info);
    AddVertices(coordUV, terrIndex, SAMPLE_TERRAIN, face, info);

    if(any(coordUV >= numCubesPerAxis))
        return;

    AddTriangulation(coordUV, terrIndex, int2(bSTART_baseT, counterInd.y), info);
    AddTriangulation(coordUV, tspIndex, int2(bSTART_waterT, counterInd.z), info);
    AddTriangulation(coordUV, waterIndex, int2(bSTART_waterT, counterInd.z), info);
}
