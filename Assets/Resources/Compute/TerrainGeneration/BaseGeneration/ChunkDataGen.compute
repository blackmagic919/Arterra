#pragma kernel Generate
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/Utility/PerlinNoiseSampler.hlsl"
const static uint SURF_STRIDE_4BYTE = 4;
const static int numThreads = 8;
const static int Epsilon = 0.0001;

struct DensityFunc{
    int lowerLimit;
    int upperLimit;
    int center;

    float multiplier;
    float power;
};

struct BMaterial{
    int materialIndex;
    float genNoiseSize;
    float genNoiseShape;
    DensityFunc density;
};

float IsoLevel;
float waterHeight;
int waterMat;

StructuredBuffer<float> _BiomeAtmosphereData;
StructuredBuffer<uint4> _BiomePrefCount;
StructuredBuffer<BMaterial> _BiomeGroundMaterials;
StructuredBuffer<BMaterial> _BiomeSurfaceMaterials;

uint coarseCaveSampler;
uint fineCaveSampler;
uint coarseMatSampler;
uint fineMatSampler;
float offsetY;

struct surfData{
    float terrain;
    float squash;
    int biome;
    float cFreq;
    float cSize;
    float cShape;
};

StructuredBuffer<surfData> _SurfMemoryBuffer;
StructuredBuffer<uint2> _SurfAddressDict;
uint surfAddress;


surfData ReadSurfData(uint2 coord){
    uint address = _SurfAddressDict[surfAddress].y + indexFromCoord2DManual(coord, numPointsPerAxis);
    return _SurfMemoryBuffer[address];
}

//We can't store them all together just yet because structures
//use InterlockedMax which only works on 4 byte types
struct mapData{ 
    uint density;
    uint viscosity;
    uint material;
};

RWStructuredBuffer<mapData> BaseMap;
uint bSTART_map;


float GetNoiseCentered(float val, float center, float bottom, float top){
    float clamped = clamp(val, bottom, top);//
                
    return (clamped > center) ? 1-smoothstep(center, top, clamped)
    : smoothstep(bottom, center, clamped);
}

float GetNoiseCentered(float val, float center){
    return GetNoiseCentered(val, center, 0, 1);
}

float GetHeightPref(BMaterial material, float posY){
    DensityFunc pref = material.density;
    float heightFactor = GetNoiseCentered(posY, pref.center, pref.lowerLimit, pref.upperLimit);
    float densityValue = pow(abs(heightFactor), pref.power);
    return densityValue * pref.multiplier;
}

float GetMaterialWeight(BMaterial material, float coarse, float fine, float posY){
    float coarsePref = material.genNoiseSize;
    float noiseCenter = material.genNoiseShape;

    float coarseCentered = GetNoiseCentered(coarse, noiseCenter, 0, 1);
    float fineCentered = GetNoiseCentered(fine, noiseCenter, 0, 1);

    float baseWeight = coarsePref * coarseCentered + (1.0f-coarsePref) * fineCentered;
    float heightPref = GetHeightPref(material, posY);
    return baseWeight * heightPref;
}

//It's better to make 2 funcs rather than do extra comparisons
int GetGroundMaterial(float coarse, float fine, uint biome, float posY){
    uint biomeStartIndex = _BiomePrefCount[biome].x;
    uint biomeEndIndex = _BiomePrefCount[biome+1].x;

    int bestMat = _BiomeGroundMaterials[biomeStartIndex].materialIndex;
    float maxWeight = -1.0f;
    
    for(uint matInd = biomeStartIndex; matInd < biomeEndIndex; matInd++){
        BMaterial material = _BiomeGroundMaterials[matInd];
        float weight = GetMaterialWeight(material, coarse, fine, posY);

        if(weight > maxWeight){
            maxWeight = weight;
            bestMat = material.materialIndex;
        }
    }

    return bestMat;
}

int GetSurfaceMaterial(float coarse, float fine, uint biome, float posY){
    uint biomeStartIndex = _BiomePrefCount[biome].y;
    uint biomeEndIndex = _BiomePrefCount[biome+1].y;

    int bestMat = _BiomeSurfaceMaterials[biomeStartIndex].materialIndex;
    float maxWeight = -1.0f;
    
    for(uint matInd = biomeStartIndex; matInd < biomeEndIndex; matInd++){
        BMaterial material = _BiomeSurfaceMaterials[matInd];
        float weight = GetMaterialWeight(material, coarse, fine, posY);

        if(weight > maxWeight){
            maxWeight = weight;
            bestMat = material.materialIndex;
        }
    }

    return bestMat;
}



[numthreads(numThreads, numThreads, numThreads)]
void Generate (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis ) {
        return;
    }

    surfData data = ReadSurfData(id.xz);
    uint biome = max(0, (uint)data.biome);
    float coarseMatNoise = GetNoise(id, coarseMatSampler);
    float fineMatNoise = GetNoise(id, fineMatSampler);

    float actualHeight = id.y + offsetY;
    float groundHeight = actualHeight - data.terrain;

    //Get Base Density
    float coarseCaveNoise = GetNoise(id, coarseCaveSampler);
    float fineCaveNoise = GetNoise(id, fineCaveSampler);

    float coarseCaveCentered = GetNoiseCentered(coarseCaveNoise, data.cShape);
    float fineCaveCentered = GetNoiseCentered(fineCaveNoise, data.cShape);

    float centeredCaveNoise = lerp(fineCaveCentered, coarseCaveCentered, data.cSize);
    float baseDensity = pow(abs(1.0f-centeredCaveNoise), data.cFreq); //We do 1-noise because cave means low density

    //Blend with Terrain Height
    float terrainFactor = clamp((data.terrain - actualHeight) / (data.squash + Epsilon), 0, 1);
    float atmosphereFactor = exp(-max(actualHeight - data.terrain, 0) * _BiomeAtmosphereData[biome]);
    float density = baseDensity * (terrainFactor * (1-IsoLevel) + atmosphereFactor * IsoLevel);


    //Generate Water
    uint index = indexFromCoord(id) + bSTART_map;
    if(actualHeight > (data.terrain - data.squash) && actualHeight < waterHeight && density < IsoLevel){
        BaseMap[index].density = 255;
        BaseMap[index].viscosity = (uint)round(density * 255.0f);
        BaseMap[index].material = waterMat;
        return;
    }

    //Get Material
    int matInd = 0;
    if(density > IsoLevel)
        matInd = GetGroundMaterial(coarseMatNoise, fineMatNoise, biome, groundHeight);
    else
        matInd = GetSurfaceMaterial(coarseMatNoise, fineMatNoise, biome, groundHeight);
    
    //Generate Land
    BaseMap[index].density = (uint)round(density * 255.0f);
    BaseMap[index].viscosity = BaseMap[index].density;
    BaseMap[index].material = matInd;
}
