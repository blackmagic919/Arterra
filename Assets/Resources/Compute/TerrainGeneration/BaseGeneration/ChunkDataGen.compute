#pragma kernel Generate
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/Utility/PerlinNoiseSampler.hlsl"
#include "Assets/Resources/Compute/TerrainGeneration/BaseGeneration/CaveBiomeSampler.hlsl"
const static uint SURF_STRIDE_4BYTE = 4;
const static int numThreads = 8;
const static int Epsilon = 0.0001;

struct BMaterial{
    int materialIndex;
    float genNoiseSize;
    float genNoiseShape;
    float frequency;
    float height;
};

struct PrefixCounters{
    uint GroundEnd;
    uint SurfaceEnd;
    uint WaterEnd;
    uint StructureStart;
    uint EntityStart;
};

float IsoLevel;
float heightSFalloff;
float atmoStrength;
float waterHeight;

StructuredBuffer<PrefixCounters> _BiomePrefCount;
StructuredBuffer<BMaterial> _BiomeMaterials;
int _BSkyStart;

uint caveFreqSampler;
uint caveSizeSampler;
uint caveShapeSampler;

uint coarseCaveSampler;
uint fineCaveSampler;
uint coarseMatSampler;
uint fineMatSampler;

struct surfData{
    int biome;
    float terrain;
    float squash;
    float atmosphere;
    float InfMax;
    float InfMin;
};

StructuredBuffer<surfData> _SurfMemoryBuffer;
StructuredBuffer<uint2> _SurfAddressDict;
uint surfAddress;


surfData ReadSurfData(uint2 coord){
    uint address = _SurfAddressDict[surfAddress].y + indexFromCoord2DManual(coord, numPointsPerAxis);
    return _SurfMemoryBuffer[address];
}

//We can't store them all together just yet because structures
//use InterlockedMax which only works on 4 byte types
struct mapData{ 
    uint density;
    uint viscosity;
    uint material;
};

RWStructuredBuffer<mapData> BaseMap;
RWStructuredBuffer<uint> BiomeMap;
uint bSTART_map;
uint bSTART_biome;


float GetNoiseCentered(float val, float center, float bottom, float top){
    float clamped = clamp(val, bottom, top);//
                
    return (clamped > center) ? 1-smoothstep(center, top, clamped)
    : smoothstep(bottom, center, clamped);
}

float GetNoiseCentered(float val, float center){
    return GetNoiseCentered(val, center, 0, 1);
}

float GetMaterialWeight(BMaterial material, float coarse, float fine, float height){
    float coarsePref = material.genNoiseSize;
    float noiseCenter = material.genNoiseShape;

    float coarseCentered = GetNoiseCentered(coarse, noiseCenter, 0, 1);
    float fineCentered = GetNoiseCentered(fine, noiseCenter, 0, 1);

    float baseWeight = coarsePref * coarseCentered + (1.0f-coarsePref) * fineCentered;
    //freq^((1-v)/freq) * v gives more saturated results with higher frequencies
    baseWeight = pow(abs(material.frequency), (1 - baseWeight)/material.frequency) * baseWeight;
    if(height <= 1.0f) baseWeight *= 1 - abs(height - material.height);
    return baseWeight;
}


int GetMaterial(int2 biomeBounds, float coarse, float fine, float height){
    int bestMat = _BiomeMaterials[biomeBounds.x].materialIndex;
    float maxWeight = -1.0f;
    
    for(int matInd = biomeBounds.x; matInd < biomeBounds.y; matInd++){
        BMaterial material = _BiomeMaterials[matInd];
        float weight = GetMaterialWeight(material, coarse, fine, height);

        if(weight > maxWeight){
            maxWeight = weight;
            bestMat = material.materialIndex;
        }
    }

    return bestMat;
}



[numthreads(numThreads, numThreads, numThreads)]
void Generate (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis ) {
        return;
    }
    uint index = indexFromCoord(id);
    surfData data = ReadSurfData(id.xz);
    float actualHeight = id.y * skipInc + sOffset.y;
    float groundHeight = actualHeight - data.terrain;

    float rawMaps[4];
    rawMaps[0] = GetRawNoise(id, caveFreqSampler);
    rawMaps[1] = GetRawNoise(id, caveSizeSampler);
    rawMaps[2] = GetRawNoise(id, caveShapeSampler);
    rawMaps[3] = 1.0f - exp(-abs(groundHeight)/heightSFalloff);

    int biome;
    if(data.InfMin <= groundHeight && groundHeight <= data.InfMax)
        biome = data.biome; //use surface biome
    else {
        int treeOff = groundHeight > 0 ? _BSkyStart : 0;
        biome = GetBiome(rawMaps, treeOff); 
    }
    BiomeMap[index + bSTART_biome] = biome;

    float caveFreq = interpolateValue(rawMaps[0], caveFreqSampler);
    float caveSize = interpolateValue(rawMaps[1], caveSizeSampler);
    float caveShape = interpolateValue(rawMaps[2], caveShapeSampler);

    float coarseMatNoise = GetNoise(id, coarseMatSampler);
    float fineMatNoise = GetNoise(id, fineMatSampler);

    //Get Base Density
    float coarseCaveNoise = GetNoise(id, coarseCaveSampler);
    float fineCaveNoise = GetNoise(id, fineCaveSampler);

    float coarseCaveCentered = GetNoiseCentered(coarseCaveNoise, caveShape);
    float fineCaveCentered = GetNoiseCentered(fineCaveNoise, caveShape);

    float centeredCaveNoise = lerp(fineCaveCentered, coarseCaveCentered, caveSize);
    float baseDensity = pow(abs(1.0f-centeredCaveNoise), caveFreq); //We do 1-noise because cave means low density

    //Blend with Terrain Height
    float terrainFactor = clamp((data.terrain - actualHeight) / (data.squash + Epsilon), 0, 1);
    float atmosphereFactor = exp(-max(actualHeight - data.terrain, 0) * data.atmosphere * atmoStrength);
    float density = baseDensity * (terrainFactor * (1-IsoLevel) + atmosphereFactor * IsoLevel);

    index = indexFromCoord(id) + bSTART_map;
    //Get Material
    int2 bounds;
    float height = groundHeight > 0 ? groundHeight / data.InfMax : groundHeight / data.InfMin;
    if(density >= IsoLevel){
        BaseMap[index].density = (uint)round(density * 255.0f);
        BaseMap[index].viscosity = BaseMap[index].density;
        bounds.x = _BiomePrefCount[biome].WaterEnd;
        bounds.y = _BiomePrefCount[biome+1].GroundEnd;
    } else if(actualHeight > (data.terrain - data.squash) && actualHeight < waterHeight){
        BaseMap[index].density = 255;
        BaseMap[index].viscosity = (uint)round(density * 255.0f);
        bounds.x = _BiomePrefCount[biome+1].SurfaceEnd;
        bounds.y = _BiomePrefCount[biome+1].WaterEnd;
    } else {
        BaseMap[index].density = (uint)round(density * 255.0f);
        BaseMap[index].viscosity = BaseMap[index].density;
        bounds.x = _BiomePrefCount[biome+1].GroundEnd;
        bounds.y = _BiomePrefCount[biome+1].SurfaceEnd;
    }

    int matInd = GetMaterial(bounds, coarseMatNoise, fineMatNoise, height);
    BaseMap[index].material = matInd;
}
