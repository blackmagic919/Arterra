
static const uint cellClass[32] = {
	0x42313110, 0x34434321, 0xC6424231, 0x47A5B552, 
    0xA5524321, 0x4B75C462, 0x47B53443, 0x3EE84A75, 
    0xB5435221, 0x4AC47562, 0x4734A543, 0x3E4BE875,
    0xE8757562, 0xDEF7F796, 0x3E4A4BC4, 0x12DEDEF7,
    0x76525221, 0x4CB4A453, 0xF9767652, 0xDFE7E785,
    0xE785B453, 0x34EA4374, 0xDFE74CA4, 0x1D2E34EB,
    0xE7A48553, 0x3443EB74, 0xDF4CE7B4, 0x1D342EEA,
    0x2EEBEA74, 0x13D4D4FC, 0x1D343443, 0x011313D4
};

static const uint triangulation[16][2] = {
    {0x0, 0x0}, {0x210, 0x0}, {0x543210, 0x0}, {0x320210, 0x0},
    {0x21431410, 0x3}, {0x54320210, 0x6}, {0x76543210, 0x8},
    {0x21431410, 0x7653}, {0x54320210, 0x7646}, {0x76543210, 0xBA98},
    {0x31410540, 0x3214}, {0x41140450, 0x2313}, {0x10430540, 0x3213},
    {0x30320210, 0x5404}, {0x30320210, 0x6505404}, {0x10430540, 0x8763213}
};

//Divided per byte, high nibble is vertex count, low nibble is triangle count
static const uint geoCounts[4] = { 0x42623100,  0x84937353, 0x6464C484, 0x95756464 };

static const uint vertices[256][2] = {
    {0x0, 0x0}, {0x830, 0x0}, {0x190, 0x0}, {0x1983, 0x0}, 
    {0xb23, 0x0}, {0xb208, 0x0}, {0xb23190, 0x0}, {0x198b2, 0x0}, 
    {0x2a1, 0x0}, {0xa12830, 0x0}, {0x2a90, 0x0}, {0x2a983, 0x0}, 
    {0xba13, 0x0}, {0x8ba1, 0x0}, {0x3ba90, 0x0}, {0xba98, 0x0}, 
    {0x478, 0x0}, {0x4730, 0x0}, {0x478190, 0x0}, {0x47319, 0x0}, 
    {0x478b23, 0x0}, {0xb2047, 0x0}, {0x23190478, 0xb}, {0x1947b2, 0x0}, 
    {0x478a12, 0x0}, {0xa124730, 0x0}, {0x478a902, 0x0}, {0x3749a2, 0x0}, 
    {0x478ba13, 0x0}, {0x47ba1, 0x0}, {0x4783ba90, 0x0}, {0x7ba94, 0x0}, 
    {0x549, 0x0}, {0x549830, 0x0}, {0x5401, 0x0}, {0x83154, 0x0}, 
    {0x549b23, 0x0}, {0x5498b20, 0x0}, {0xb231540, 0x0}, {0x1548b2, 0x0}, 
    {0x549a12, 0x0}, {0x49a12830, 0x5}, {0x5402a, 0x0}, {0x2a5483, 0x0}, 
    {0x549ba13, 0x0}, {0x54908ba1, 0x0}, {0x45ab3, 0x0}, {0x48ba5, 0x0}, 
    {0x5789, 0x0}, {0x95730, 0x0}, {0x1578, 0x0}, {0x5731, 0x0}, 
    {0xb235789, 0x0}, {0x75902b, 0x0}, {0xb2301578, 0x0}, {0x2157b, 0x0}, 
    {0xa125789, 0x0}, {0xa1295730, 0x0}, {0x2a578, 0x0}, {0xa5732, 0x0}, 
    {0xba135789, 0x0}, {0x957ba10, 0x0}, {0x3ba5780, 0x0}, {0xa57b, 0x0}, 
    {0x76b, 0x0}, {0x76b830, 0x0}, {0x76b190, 0x0}, {0x76b1983, 0x0}, 
    {0x7623, 0x0}, {0x76208, 0x0}, {0x1907623, 0x0}, {0x891267, 0x0}, 
    {0x76b2a1, 0x0}, {0x6ba12830, 0x7}, {0x76b2a90, 0x0}, {0x76b2a983, 0x0}, 
    {0xa1376, 0x0}, {0x876a10, 0x0}, {0x376a90, 0x0}, {0x6a987, 0x0}, 
    {0x46b8, 0x0}, {0x3046b, 0x0}, {0x19046b8, 0x0}, {0x31946b, 0x0}, 
    {0x84623, 0x0}, {0x4620, 0x0}, {0x19084623, 0x0}, {0x94621, 0x0}, 
    {0xa1246b8, 0x0}, {0xa123046b, 0x0}, {0xa90246b8, 0x0}, {0x2a946b3, 0x0}, 
    {0x31a648, 0x0}, {0x1046a, 0x0}, {0x846a903, 0x0}, {0x46a9, 0x0}, 
    {0x76b549, 0x0}, {0x6b549830, 0x7}, {0x76b1540, 0x0}, {0x76b83154, 0x0}, 
    {0x5493762, 0x0}, {0x54976208, 0x0}, {0x15403762, 0x0}, {0x7621548, 0x0}, 
    {0x6b549a12, 0x7}, {0x49a12830, 0x76b5}, {0x76b5402a, 0x0}, {0x6ba54832, 0x7}, 
    {0x549a1376, 0x0}, {0x49876a10, 0x5}, {0x540376a, 0x0}, {0x76a548, 0x0}, 
    {0x6b895, 0x0}, {0xb30956, 0x0}, {0x5108b6, 0x0}, {0xb3156, 0x0}, 
    {0x895623, 0x0}, {0x56209, 0x0}, {0x156238, 0x0}, {0x5621, 0x0}, 
    {0xa126b895, 0x0}, {0x126b3095, 0xa}, {0x6b802a5, 0x0}, {0x2a56b3, 0x0}, 
    {0xa138956, 0x0}, {0x956a10, 0x0}, {0x56a380, 0x0}, {0x56a, 0x0}, 
    {0x65a, 0x0}, {0x65a830, 0x0}, {0x65a190, 0x0}, {0x65a1983, 0x0}, 
    {0x65ab23, 0x0}, {0x65a8b20, 0x0}, {0x5ab23190, 0x6}, {0x65a198b2, 0x0}, 
    {0x2651, 0x0}, {0x8306512, 0x0}, {0x90265, 0x0}, {0x326598, 0x0}, 
    {0x6513b, 0x0}, {0x6b8015, 0x0}, {0x65903b, 0x0}, {0x598b6, 0x0}, 
    {0x65a478, 0x0}, {0x65a4730, 0x0}, {0x5a478190, 0x6}, {0x65a47319, 0x0}, 
    {0x5a478b23, 0x6}, {0x65ab2047, 0x0}, {0x78b23190, 0x65a4}, {0x5a947b21, 0x6}, 
    {0x4786512, 0x0}, {0x65124730, 0x0}, {0x47890265, 0x0}, {0x4732659, 0x0}, 
    {0x4786513b, 0x0}, {0x651047b, 0x0}, {0x78b65903, 0x4}, {0x65947b, 0x0}, 
    {0xa649, 0x0}, {0x830a649, 0x0}, {0xa6401, 0x0}, {0x846a13, 0x0}, 
    {0xb23a649, 0x0}, {0x649a8b20, 0x0}, {0xb23a6401, 0x0}, {0xa648b21, 0x0}, 
    {0x12649, 0x0}, {0x83012649, 0x0}, {0x2640, 0x0}, {0x32648, 0x0}, 
    {0xb64913, 0x0}, {0x8b6491, 0x0}, {0xb6403, 0x0}, {0xb648, 0x0}, 
    {0x789a6, 0x0}, {0x9a673, 0x0}, {0x1a678, 0x0}, {0x6731a, 0x0}, 
    {0xb23789a6, 0x0}, {0xb209a67, 0x0}, {0x237801a6, 0xb}, {0xa67b21, 0x0}, 
    {0x762198, 0x0}, {0x1267309, 0x0}, {0x80267, 0x0}, {0x2673, 0x0}, 
    {0x78913b6, 0x0}, {0x67b910, 0x0}, {0x3b6780, 0x0}, {0x67b, 0x0}, 
    {0x75ab, 0x0}, {0x830b75a, 0x0}, {0x190b75a, 0x0}, {0x75ab9831, 0x0}, 
    {0x2375a, 0x0}, {0x875a20, 0x0}, {0x1902375a, 0x0}, {0x19875a2, 0x0}, 
    {0xb7512, 0x0}, {0x830b7512, 0x0}, {0xb20957, 0x0}, {0xb759832, 0x0}, 
    {0x3751, 0x0}, {0x87510, 0x0}, {0x3759, 0x0}, {0x8759, 0x0}, 
    {0x5ab84, 0x0}, {0x3ba540, 0x0}, {0x1905ab84, 0x0}, {0x5ab3194, 0x0}, 
    {0x3845a2, 0x0}, {0xa2045, 0x0}, {0x15a2384, 0x9}, {0x1945a2, 0x0}, 
    {0x2b8451, 0x0}, {0x304512b, 0x0}, {0x902b845, 0x0}, {0x4592b3, 0x0}, 
    {0x45138, 0x0}, {0x451, 0x0}, {0x845903, 0x0}, {0x459, 0x0}, 
    {0x49ab7, 0x0}, {0x83049ab7, 0x0}, {0x1ab740, 0x0}, {0x831ab74, 0x0}, 
    {0x2a9473, 0x0}, {0x49a2087, 0x0}, {0x237401a, 0x0}, {0x7481a2, 0x0}, 
    {0x2b7491, 0x0}, {0x304912b7, 0x8}, {0x7402b, 0x0}, {0xb74832, 0x0}, 
    {0x91374, 0x0}, {0x87491, 0x0}, {0x3740, 0x0}, {0x748, 0x0}, 
    {0x9ab8, 0x0}, {0x9ab3, 0x0}, {0x1ab80, 0x0}, {0x1ab3, 0x0}, 
    {0x389a2, 0x0}, {0x9a20, 0x0}, {0x1a238, 0x0}, {0xa21, 0x0}, 
    {0x2b891, 0x0}, {0x30912b, 0x0}, {0x2b8, 0x0}, {0x2b3, 0x0}, 
    {0x8913, 0x0}, {0x910, 0x0}, {0x380, 0x0}, {0x0, 0x0}
};

uint CellClass(uint cellIndex){ 
    return (cellClass[cellIndex >> 3] >> ((cellIndex & 0x7) << 2)) & 0xF;
}

//returns edge index
uint Vertices(uint cellIndex, uint vertexIndex){
    return (vertices[cellIndex][vertexIndex >> 3] >> ((vertexIndex & 0x7) << 2)) & 0xF;
}

//returns vertex index
uint Triangulation(uint CClass, uint vertexIndex){ 
    return (triangulation[CClass][vertexIndex >> 3] >> ((vertexIndex & 0x7) << 2)) & 0xF;
}

uint TriangleCount(uint CClass){
    return (geoCounts[CClass >> 2] >> ((CClass & 0x3) << 3)) & 0xF;
}

uint VertexCount(uint CClass){
    return (geoCounts[CClass >> 2] >> (((CClass & 0x3) << 3) + 4)) & 0xF;
}


//Rationale: First index is always closer to the origin than second
//This allows us to create consistent indexes without testing which one is larger
static const int3 cornerIndexFromEdge[12] = {
    {0, 1, 0},
    {1, 3, 1},
    {2, 3, 0},
    {0, 2, 1},
    {4, 5, 0},
    {5, 7, 1},
    {6, 7, 0},
    {4, 6, 1},
    {0, 4, 2},
    {1, 5, 2},
    {3, 7, 2},
    {2, 6, 2}
};

/* 0x21431410
* 0x6731a
*    6---6----7
*   7|       5|
*  / 11      /10
* 4--+-4---5  |
* |  |     9  |
* 8  2---2-+--3
* | 3      | 1
* 0----0---1/
* 
* y
* ^     .--------.
* |    /|       /|
* |   / |      / |    z
* |  .--+-----.  |   /\
* |  |  |     |  |   /
* |  |  .-----+--.  /
* |  | /      | /  /
* | xyz_______./  /
* +---------> x  /
*/


static const int3 positionFromIndex[8] = {
    {0, 0, 0},
    {1, 0, 0},
    {0, 1, 0},
    {1, 1, 0},
    {0, 0, 1},
    {1, 0, 1},
    {0, 1, 1},
    {1, 1, 1}
};