#pragma kernel Identify
#pragma kernel Prune

#include "Assets/Resources/Compute/Utility/Random.hlsl"
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/MapData/CCoordHash.hlsl"

const static int numThreads = 8;
const static int numThreadsFlat = 256;

struct enititySetting{
    uint entityIndex;
    float freq;
};

struct entityBound{
    uint3 boundSize;
    uint boundStart;
};

struct entityCheck{
    uint bounds;// upper_vis, low_vis, upper_dens, low_dens
    uint flags;
};

struct entityInfo {
    int3 position;
    uint entityIndex;
};

StructuredBuffer<entityBound> _EntityInfo;
StructuredBuffer<entityCheck> _EntityProfile;
StructuredBuffer<uint4> _BiomePrefCount;
StructuredBuffer<enititySetting> _BiomeEntities;

StructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<CInfo> _AddressDict;
int3 CCoord;

RWStructuredBuffer<uint> counter;
uint bCOUNTER_entities;
uint bCOUNTER_prune;

StructuredBuffer<int> BiomeMap;
uint bSTART_biome;
RWStructuredBuffer<entityInfo> chunkEntities;
uint bSTART_entities;
uint bSTART_prune;


[numthreads(numThreads,numThreads,numThreads)]
void Identify (uint3 id : SV_DispatchThreadID)
{
    if (any(id >= numPointsPerAxis))
        return;
    
    int3 pointCoord = id + (CCoord - 0.5f) * numPointsPerAxis; 
    uint seedEntity = Random(pointCoord); 
    
    uint biome = BiomeMap[indexFromCoord(id) + bSTART_biome];
    uint entityStart = _BiomePrefCount[biome].w;
    uint entityEnd = _BiomePrefCount[biome+1].w;

    for(uint index = entityStart; index < entityEnd; index++){
        enititySetting setting = _BiomeEntities[index];
        if(RandomFloat(seedEntity) < setting.freq){
            entityInfo newOrigin;
            newOrigin.position = id;
            newOrigin.entityIndex = setting.entityIndex; 

            uint appendInd = 0;
            InterlockedAdd(counter[bCOUNTER_entities], 1, appendInd);
            chunkEntities[bSTART_entities + appendInd] = newOrigin;
            return;
        }
        seedEntity = Random(seedEntity);
    }   
}


/*
* z
* ^       .--------.
* |      /|       /| 
* |     / |      / | <- Above Ground           y
* |    .--+-----.  |                         /\
* |    |  |     |  |                         /
* |    |  .-----+--.                        /
* |    | /|_____|_/| <- At least one       /
* |    |/______./ /     below ground      /
* |  xyz________|/                       /
* |                                     /
* +------------------------------------> x  
* Two Regions, x & y: (∀x(b(x)) v ¬∃x) ^ (∃y(b(y)) v ¬∃y))
*/

uint SampleMapData(uint3 coord){
    uint3 dCC = floor(coord / (float)numPointsPerAxis);
    coord -= dCC * numPointsPerAxis;
    CInfo chunkHandle = _AddressDict[HashCoord(CCoord + dCC)];
    if(!Contains(chunkHandle, CCoord))
        return asuint(-1);
    else{
        uint address = chunkHandle.address + indexFromCoord(coord);
        return _MemoryBuffer[address];
    }
}

uint density(uint data) { return data & 0x000000FF; }
uint viscosity(uint data) { return (data & 0x0000FF00) >> 8; }
uint material(uint data) { return (data & 0x7FFF0000) >> 16; }
bool InBounds(uint data, uint bounds) { 
    uint density = data & 0xFF; uint viscosity = (data >> 8) & 0xFF;
    return density >= (bounds & 0xFF) && density <= ((bounds >> 8) & 0xFF) && viscosity >= ((bounds >> 16) & 0xFF) && viscosity <= ((bounds >> 24) & 0xFF); 
}

[numthreads(numThreadsFlat,1,1)]
void Prune(uint3 id : SV_DispatchThreadID){
    if(id.x >= counter[bCOUNTER_entities])
        return;
    
    entityInfo entity = chunkEntities[bSTART_entities + id.x];
    entityBound bounds = _EntityInfo[entity.entityIndex];
    uint entityLength = bounds.boundSize.x * bounds.boundSize.y * bounds.boundSize.z;

    bool allC = true; bool anyC = false; bool any0 = false;
    for(uint i = 0; i < entityLength; i++){
        uint3 offsetCoord = uint3(i / (bounds.boundSize.y * bounds.boundSize.z), 
                                (i / bounds.boundSize.z) % bounds.boundSize.y, 
                                i % bounds.boundSize.z);
        entityCheck check = _EntityProfile[bounds.boundStart + i];

        bool valid = InBounds(SampleMapData(entity.position + offsetCoord), check.bounds);
        allC = allC && (valid || !(check.flags & 0x1));
        anyC = anyC || (valid && (check.flags & 0x2));
        any0 = any0 || (check.flags & 0x2);
    }  if(!allC || (any0 && !anyC)) return;
    
    uint appendInd = 0;
    InterlockedAdd(counter[bCOUNTER_prune], 1, appendInd);
    chunkEntities[bSTART_prune + appendInd] = entity;
}
