#pragma kernel Bake
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/MapData/WSDensitySampler.hlsl"
#include "Assets/Resources/Compute/MapData/WSLightSampler.hlsl"
const static float StaticLightIntensity = 0.01f;

struct ScatterData{
    float3 inScatteredLight;
    float3 extinction;
};


RWStructuredBuffer<ScatterData> mapData;
RWStructuredBuffer<uint> treeLocks;
StructuredBuffer<float3> rayInfo;
uint screenHeight;
uint screenWidth;

float3 _LightDirection; //Global Variable

float _AtmosphereRadius;
uint _NumInScatterPoints;
uint _NumOpticalDepthPoints;

float2 raySphere(float3 s0, float sr, float3 r0, float3 rd) {
    float a = dot(rd, rd);
    float3 s0_r0 = r0 - s0;
    float b = 2.0 * dot(rd, s0_r0);
    float c = dot(s0_r0, s0_r0) - (sr * sr);
	float disc = b * b - 4.0 * a* c;
                    
    if (disc < 0.0) {
        return float2(-1.0, -1.0);
    }else{
        float t1 = max((-b - sqrt(disc)) / (2.0 * a), 0);
        float t2 = max((-b + sqrt(disc)) / (2.0 * a), 0);
        return float2(t1, t2-t1);
	}
}


float4 CumulativeStaticLight(float3 rayOrigin, float3 rayDir, float rayLength){
    float stepSize = rayLength / (_NumOpticalDepthPoints - 1);
    uint4 CumStaticLight = 0; //xyz -> rgb, w -> shadow
    for(uint i = 0; i < _NumOpticalDepthPoints; i++){
        uint light = SampleLightFast(rayOrigin);
        CumStaticLight.x += (light & 0x3FF);
        CumStaticLight.y += (light >> 10 & 0x3FF);
        CumStaticLight.z += (light >> 20 & 0x3FF);
        CumStaticLight.w += (light >> 30 & 0x3);
        rayOrigin += rayDir * stepSize;
    }
    float4 ObjLight = CumStaticLight;
    ObjLight /= _NumOpticalDepthPoints;
    ObjLight.xyz /= 1023.0f;
    ObjLight.w = 1.0f - (ObjLight.w / 3.0f); //1 means in shadow means No Light(0)
    return ObjLight;
}


OpticalInfo CumulativeMapInfo(float3 rayOrigin, float3 rayDir, float rayLength){
    float stepSize = rayLength / (_NumOpticalDepthPoints - 1);
    OpticalInfo info = (OpticalInfo)0;

    for(uint i = 0; i < _NumOpticalDepthPoints; i++){
        OpticalInfo sampleData = SampleMapData(rayOrigin);
        info.opticalDensity += sampleData.opticalDensity / ((float)IsoLevel);
        info.scatterCoeffs += sampleData.scatterCoeffs;
        info.extinctionCoeff += sampleData.extinctionCoeff;
        rayOrigin += rayDir * stepSize;
    }
    info.opticalDensity /= _NumOpticalDepthPoints;
    info.scatterCoeffs /= _NumOpticalDepthPoints;
    info.extinctionCoeff /= _NumOpticalDepthPoints;
    return info;
}



float3 opticalDepth(float3 rayOrigin, float3 rayDir, float rayLength){
    float3 densitySamplePoint = rayOrigin;
    float stepSize = rayLength / (_NumOpticalDepthPoints - 1);
    float3 opticalDepth = 0;

    for(uint i = 0; i < _NumOpticalDepthPoints; i++){
        OpticalDepth mapData = SampleOpticalDepth(densitySamplePoint);
        opticalDepth += mapData.scatterCoeffs * (mapData.opticalDensity / ((float)IsoLevel));
        densitySamplePoint += rayDir * stepSize;
    }

    return opticalDepth * stepSize;
}

void ConstructSampleTree(ScatterData cNode, uint pixelIndex, uint depth){
    depth += _NumInScatterPoints; uint parent = depth >> 1;
    uint numTreeLocks = ceil(_NumInScatterPoints / 32.0f);
    uint lockHandle = 0xFFFFFFFF;

    //Parallel Binary Index Tree Construction
    while(depth != 0){//>> 5 means / 32
        uint lockIndex = pixelIndex * numTreeLocks + (parent >> 5);
        uint texelIndex = pixelIndex * _NumInScatterPoints * 2 + depth;
        mapData[texelIndex] = cNode;

        InterlockedXor(treeLocks[lockIndex], 1 << (parent & 0x1F), lockHandle);
        if((lockHandle >> (parent & 0x1F)) & 0x1 == 0) return; 
        //If lock bit is 0, its sibling is second and has not completed yet
        //If lock bit is 1, its sibling is first, so we can safely access it 

        ScatterData sibling = mapData[texelIndex ^ 0x1];
        cNode.inScatteredLight += sibling.inScatteredLight;
        cNode.extinction += sibling.extinction;
        depth >>= 1; parent >>= 1;
    }
}


const static uint numThreads = 8;
[numthreads(numThreads,numThreads,numThreads)]
void Bake (uint3 id : SV_DispatchThreadID)
{
    uint viewX = id.x;
    uint viewY = id.y;
    uint depth = id.z;

    if(viewX >= screenWidth || viewY >= screenHeight || depth >= _NumInScatterPoints)
        return;
    
    uint pixelIndex = indexFromCoord2DManual(viewX, viewY, screenHeight);
    float3 direction = rayInfo[pixelIndex];

    float stepSize = _AtmosphereRadius / (_NumInScatterPoints - 1);
    float3 inScatterPoint = _WorldSpaceCameraPos + direction * stepSize * depth;
    float sunRayLength = raySphere(_WorldSpaceCameraPos, _AtmosphereRadius, inScatterPoint, _LightDirection).y; 

    ScatterData scatterData = (ScatterData)0;
    OpticalInfo opticalInfo = CumulativeMapInfo(inScatterPoint, direction, stepSize); 
    float4 staticLight = CumulativeStaticLight(inScatterPoint, direction, stepSize);

    //Calculate Scatter Data
    float3 sunDepth = opticalDepth(inScatterPoint, _LightDirection, sunRayLength);
    float3 cameraDepth = opticalDepth(inScatterPoint, -direction, stepSize * depth); 
    float3 transmittance =  exp(-(sunDepth + cameraDepth)); // exp(-t(PPc, lambda)-t(PPa, lambda)) 
    float3 emissionColor = _MainLightColor.xyz;

    scatterData.inScatteredLight = emissionColor * opticalInfo.scatterCoeffs * transmittance * staticLight.w;
    scatterData.inScatteredLight += staticLight.xyz * exp(-cameraDepth) * StaticLightIntensity;
    scatterData.inScatteredLight *= opticalInfo.opticalDensity;
    scatterData.extinction = opticalInfo.extinctionCoeff * opticalInfo.opticalDensity;
   
    ConstructSampleTree(scatterData, pixelIndex, depth);
}