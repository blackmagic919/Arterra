// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main
#include "Assets/Resources/Compute/GeoShader/VertexPacker.hlsl"

const static int numThreads = 256;

struct Level {
    int tslReduct;
};
struct DrawVertex{
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};

struct DrawTriangle{
    DrawVertex vertices[3];
};

struct PackedTriangle{
    uint3 vertices[3];
    uint BaseSCInd;
};


struct Settings{
    uint tesselFactor;
};
StructuredBuffer<Level> DetailSettings;
StructuredBuffer<Settings> VariantSettings;
StructuredBuffer<SourceVertex> SourceVertices;
StructuredBuffer<uint3> SourceTriangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

RWStructuredBuffer<uint> Counters;
RWStructuredBuffer<PackedTriangle> DrawTriangles;
int bSTART_base;
int bCOUNT_base;
int bSTART_oGeo;
int bCOUNT_oGeo;

bool IsCurShader(uint info){return (info & 0x80000000) && ((info >> 16 & 0x7FFF) == geoInd);}
DrawVertex MakeBaseDrawVertex(SourceVertex v){
    DrawVertex o = (DrawVertex)0;
    o.positionOS = v.positionOS;
    o.normalOS = v.normalOS;
    o.uv = IsCurShader(_MatTerrainData[v.material.x].geoShaderInd) ? 1 : 0;
    return o;
}

DrawVertex Interpolate(DrawVertex a, DrawVertex b, float t){
    DrawVertex v = (DrawVertex)0;
    v.positionOS = a.positionOS * (1 - t) + b.positionOS * t;
    v.normalOS = a.normalOS * (1 - t) + b.normalOS * t;
    v.uv = a.uv * (1 - t) + b.uv * t;
    return v;
}

DrawVertex BlendCenter(DrawTriangle base){
    DrawVertex v = (DrawVertex)0;
    v.positionOS = (base.vertices[0].positionOS + base.vertices[1].positionOS + base.vertices[2].positionOS) / 3;
    v.normalOS = (base.vertices[0].normalOS + base.vertices[1].normalOS + base.vertices[2].normalOS) / 3;
    v.uv = (base.vertices[0].uv + base.vertices[1].uv + base.vertices[2].uv) / 3;
    return v;
}

DrawTriangle GetBaseTriangle(DrawTriangle base, float tessel){
    DrawTriangle tri = (DrawTriangle)0;
    
    DrawVertex center = BlendCenter(base);
    tri.vertices[0] = Interpolate(base.vertices[0], center, (1-tessel));
    tri.vertices[1] = Interpolate(base.vertices[1], center, (1-tessel));
    tri.vertices[2] = Interpolate(base.vertices[2], center, (1-tessel));
    return tri;
}

void AppendTri(DrawTriangle tri, uint mat, uint baseSC){
    PackedTriangle packedTri = (PackedTriangle)0;
    [unroll]for(uint i = 0; i < 3; i++){
        uint3 data = PackVertices(tri.vertices[i].positionOS, 
                     normalize(tri.vertices[i].normalOS), mat);
        uint depth = clamp(tri.vertices[i].uv.x * 255, 0, 255);
        data.z |= (depth & 0xFF) << 24;
        packedTri.vertices[i] = data;
    } packedTri.BaseSCInd = baseSC;

    uint appendInd = 0;
    InterlockedAdd(Counters[bCOUNT_oGeo], 1, appendInd);
    DrawTriangles[bSTART_oGeo + appendInd] = packedTri;
}


//Based off the diagram described here https://www.khronos.org/opengl/wiki/Tessellation
void TesselateTri(DrawTriangle base, uint mat, uint baseSC){
    DrawTriangle tri; 
    int nTessel; int oTessel; 
    uint tesselFactor = VariantSettings[mat].tesselFactor;
    tesselFactor = max(tesselFactor - DetailSettings[GetDetailLevel(baseSC)].tslReduct, 0);
    for(nTessel = tesselFactor - 2, oTessel = tesselFactor; nTessel >= 0; nTessel -= 2){
        DrawTriangle nBase = GetBaseTriangle(base, ((float)nTessel / tesselFactor));
        [unroll]for(uint v = 0; v < 3; v++){
            DrawVertex a = base.vertices[v]; DrawVertex b = base.vertices[(v+1)%3];
            DrawVertex c = nBase.vertices[v]; DrawVertex d = nBase.vertices[(v+1)%3];
            for(int edgePt = 0; edgePt < nTessel; edgePt++){
                tri.vertices[2] = Interpolate(a, b, ((float)(edgePt + 1) / (oTessel)));
                tri.vertices[1] = Interpolate(c, d, ((float)(edgePt + 1) / nTessel));
                tri.vertices[0] = Interpolate(a, b, ((float)(edgePt + 2) / (oTessel)));
                AppendTri(tri, mat, baseSC);

                tri.vertices[0] = tri.vertices[1];
                tri.vertices[1] = Interpolate(c, d, (float)edgePt / nTessel);
                AppendTri(tri, mat, baseSC);
            }

            tri.vertices[2] = a;
            tri.vertices[1] = c;
            tri.vertices[0] = Interpolate(a, b, (1.0f/(oTessel)));;
            AppendTri(tri, mat, baseSC);

            tri.vertices[2] = Interpolate(a, b, ((float)nTessel + 1) / (oTessel));
            tri.vertices[1] = d;
            tri.vertices[0] = b;
            AppendTri(tri, mat, baseSC);
        }

        base = nBase;
        oTessel = nTessel;
    }

    if(nTessel == -1) AppendTri(base, mat, baseSC);
}


[numthreads(numThreads,1,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    uint startIndex = Counters[bCOUNT_base];
    uint numSourceTriangles = Counters[bCOUNT_base+1] - startIndex;
    if(id.x >= numSourceTriangles) return;//

    uint triIndex = Counters[bSTART_base + startIndex + id.x];
    uint3 sourceTri = SourceTriangles[_AddressDict[triAddress].y + triIndex];
    
    SourceVertex inputs[3];
    inputs[0] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.x];
    inputs[1] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.y];
    inputs[2] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.z];
    uint baseSC = GetBaseSubChunk(inputs);
    uint mat = GetShaderVariant(inputs);

    DrawTriangle tri;
    tri.vertices[0] = MakeBaseDrawVertex(inputs[0]);
    tri.vertices[1] = MakeBaseDrawVertex(inputs[1]);
    tri.vertices[2] = MakeBaseDrawVertex(inputs[2]);
    TesselateTri(tri, mat, baseSC);//
}
