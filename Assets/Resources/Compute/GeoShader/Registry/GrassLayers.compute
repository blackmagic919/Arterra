// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

const static int numThreads = 256;
#include "Assets/Resources/Compute/GeoShader/VertexPacker.hlsl"

struct DrawTriangle{
    uint3 vertices[3];
};

struct Settings{
    float TotalHeight;
    int MaxLayers;
    int TexIndex;
    float4 BaseColor;
    float4 TopColor;
    float Scale;
    float CenterHeight;
    float WindFrequency;
    float WindStrength;
};

StructuredBuffer<Settings> VariantSettings;
StructuredBuffer<SourceVertex> SourceVertices;
StructuredBuffer<uint3> SourceTriangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

RWStructuredBuffer<uint> Counters;
RWStructuredBuffer<DrawTriangle> DrawTriangles;
int bSTART_base;
int bCOUNT_base;
int bSTART_oGeo;
int bCOUNT_oGeo;


uint3 ExtrudeVertex(SourceVertex v, int layerIndex, uint mat, Settings cxt){
    float height = (float)layerIndex / cxt.MaxLayers;
    uint3 data = PackVertices(v.positionOS + v.normalOS * (height * cxt.TotalHeight), v.normalOS, mat);

    uint layerHeight = clamp(height * 255, 0, 255);
    data.z |= (layerHeight & 0xFF) << 24;

    return data;
}

[numthreads(numThreads, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID){

    uint startIndex = Counters[bCOUNT_base];
    uint numSourceTriangles = Counters[bCOUNT_base+1] - startIndex;
    if(id.x >= numSourceTriangles)
        return;

    uint triIndex = Counters[bSTART_base + startIndex + id.x];
    uint3 sourceTri = SourceTriangles[_AddressDict[triAddress].y + triIndex];

    SourceVertex inputs[3];
    inputs[0] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.x];
    inputs[1] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.y];
    inputs[2] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.z];

    uint mat = GetShaderVariant(inputs);
    Settings matSettings = VariantSettings[mat];

    for(int i = 0; i < matSettings.MaxLayers; i++)
    {
        DrawTriangle tri = (DrawTriangle)0;
        [unroll] for(int p = 0; p < 3; p++){
            tri.vertices[p] = ExtrudeVertex(inputs[p], i, mat, matSettings);
        }

        int appendInd = 0;
        InterlockedAdd(Counters[bCOUNT_oGeo], 1, appendInd);
        DrawTriangles[bSTART_oGeo + appendInd] = tri;
    }
}