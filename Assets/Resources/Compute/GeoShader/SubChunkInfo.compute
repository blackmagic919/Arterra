#pragma kernel SetSubChunkDetail
#pragma kernel CollectSubChunkSizes
#pragma kernel SetSubChunkAddress
#pragma kernel ConstructPrefixSizes
#pragma kernel SetGlobalDetail

StructuredBuffer<uint2> _AddressDict;
RWStructuredBuffer<uint> SubChunkInfo;
RWStructuredBuffer<int3> SubChunkRegions;
uint bSTART_sChunkI;
uint numSubChunkRegions;

[numthreads(4, 1, 1)]
void SetSubChunkDetail(uint3 id : SV_DispatchThreadID){
    if(id.x >= numSubChunkRegions) return;
    int3 info = SubChunkRegions[id.x];

    for(int i = info.x; i < info.y; i++){
        SubChunkInfo[bSTART_sChunkI + i] = info.z; //detail level
    }
}

[numthreads(4, 1, 1)]
void CollectSubChunkSizes(uint3 id : SV_DispatchThreadID){
    if(id.x >= numSubChunkRegions) return;
    int3 info = SubChunkRegions[id.x];
    
    int size = 0;
    for(int i = info.x; i < info.y; i++){
        size += SubChunkInfo[bSTART_sChunkI + i];
    }
    SubChunkRegions[id.x].z = size;
}

[numthreads(4, 1, 1)]
void SetSubChunkAddress(uint3 id : SV_DispatchThreadID){
    if(id.x >= numSubChunkRegions) return;
    int3 info = SubChunkRegions[id.x];
    uint2 baseAddress = _AddressDict[info.z];
    uint size = 0;

    for(int i = info.x; i < info.y; i++){
        uint sSize = SubChunkInfo[bSTART_sChunkI + i];
        if(baseAddress.x == 0) SubChunkInfo[bSTART_sChunkI + i] = 0;
        else SubChunkInfo[bSTART_sChunkI + i] = baseAddress.y + size;
        size += sSize;
    }
}


RWStructuredBuffer<uint> SubChunkPrefix;
uint bSTART_sChunkP;

uint numSubChunks;
[numthreads(1, 1, 1)]
void ConstructPrefixSizes(uint3 id : SV_DispatchThreadID){
    uint size = 0;
    for(int i = 0; i < numSubChunks + 1; i++){
        uint sSize = SubChunkPrefix[bSTART_sChunkP + i];
        SubChunkPrefix[bSTART_sChunkP + i] = size;
        size += sSize;
    }
}

uint detailLevel;
[numthreads(16, 1, 1)]
void SetGlobalDetail(uint3 id : SV_DispatchThreadID){
    if(id.x >= numSubChunks) return;
    SubChunkInfo[bSTART_sChunkI + id.x] = detailLevel;
}