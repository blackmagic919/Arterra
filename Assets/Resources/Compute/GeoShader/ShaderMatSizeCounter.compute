// Each #kernel tells which function to compile; you can have many kernels
#include "Assets/Resources/Compute/GeoShader/VertexPacker.hlsl"//
#pragma kernel CountShaderSizes
#pragma kernel CountSubChunkSizes

const static int numThreads = 256;

struct pInfo{
    uint axis[3];
};

StructuredBuffer<SourceVertex> vertices;
StructuredBuffer<pInfo> triangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

StructuredBuffer<uint> counter;
RWStructuredBuffer<uint> triangleIndexOffset; //This is to facilitate parallelization
RWStructuredBuffer<uint> shaderIndexOffset; //This ensures vertexes are sorted by shader
uint bSTART_scount;
uint bSTART_tri;
uint bCOUNT_base;
uint bCOUNT_offset;


[numthreads(numThreads,1,1)]
void CountShaderSizes (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= counter[bCOUNT_base])
        return;

    triangleIndexOffset[bSTART_tri + id.x] = -1; 
    uint offset = counter[bCOUNT_offset];
    //Each triangle will have 3 materials, take the minimum shader index
    uint shaderIndex = asuint(-1); 
    pInfo vIndex = triangles[_AddressDict[triAddress].y + offset + id.x];
    [unroll] for(uint i = 0; i < 3; i++) {
        int material = vertices[_AddressDict[vertAddress].y + vIndex.axis[i]].material.x; // Only consider solid material
        uint sInd = _MatTerrainData[material].geoShaderInd;
        if((sInd & 0x80000000) == 0) continue;
        shaderIndex = min(shaderIndex, (sInd >> 16) & 0x7FFF);
    }

    if(shaderIndex == asuint(-1)) return;
    InterlockedAdd(shaderIndexOffset[bSTART_scount + shaderIndex + 1], 1, triangleIndexOffset[bSTART_tri + id.x]);
}

RWStructuredBuffer<uint> SubChunkPrefix;
uint bSTART_sChunkP;

[numthreads(numThreads,1,1)]
void CountSubChunkSizes (uint3 id : SV_DispatchThreadID){
    if(id.x >= counter[bCOUNT_base])
        return;
    
    pInfo sourceTri = triangles[_AddressDict[triAddress].y + id.x];
    SourceVertex inputs[3];
    inputs[0] = vertices[_AddressDict[vertAddress].y + sourceTri.axis[0]];
    inputs[1] = vertices[_AddressDict[vertAddress].y + sourceTri.axis[1]];
    inputs[2] = vertices[_AddressDict[vertAddress].y + sourceTri.axis[2]];
    int baseSC = GetBaseSubChunk(inputs);
    InterlockedAdd(SubChunkPrefix[bSTART_sChunkP + baseSC], 1, triangleIndexOffset[bSTART_tri + id.x]);
}