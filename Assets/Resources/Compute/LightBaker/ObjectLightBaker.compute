#include "Assets/Resources/Compute/MapData/CCoordHash.hlsl"
#include "Assets/Resources/Compute/Utility/GetIndex.hlsl"
#include "Assets/Resources/Compute/LightBaker/LightLookup.hlsl"

#pragma kernel BakeLights
const static int numThreads = 128;
//Global Lookup Buffers
StructuredBuffer<uint2> CurUpdateSubChunks;

//This code is so illegible I'm sorry
[numthreads(numThreads,1,1)]
void BakeLights (uint3 id : SV_DispatchThreadID)
{
    uint count = CurUpdateSubChunks[bCOUNT.z].x;
    if(id.x >= count) return;//

    uint ind = bSTART.z + id.x;
    uint2 SubChunkInfo = CurUpdateSubChunks[ind]; //x -> chunk index, y -> subchunk index
    CInfo cHandle = _AddressDict[SubChunkInfo.x];
    if(cHandle.address == 0) return;

    uint3 SubChunkOrigin; uint sChunkAxis = subChunksAxis;
    SubChunkOrigin.x = (SubChunkInfo.y / (sChunkAxis * sChunkAxis));
    SubChunkOrigin.y = (SubChunkInfo.y / sChunkAxis) % sChunkAxis;
    SubChunkOrigin.z = SubChunkInfo.y % sChunkAxis;
    SubChunkOrigin *= subChunkSize;
    int skipInc = (cHandle.offset & 0xFF);

    uint isDirty = 0;
    uint numCoords = subChunkSize * subChunkSize * subChunkSize;
    for(uint i = 0; i < numCoords; i++){
        uint3 sMCoord = int3(i / (subChunkSize * subChunkSize),
            (i / subChunkSize) % subChunkSize, i % subChunkSize);
        uint3 mapCoord = sMCoord + SubChunkOrigin;
        uint mIndex = indexFromCoord(mapCoord);

        int3 mC = 0; uint Shadow = 0;
        if (((_MemoryBuffer[cHandle.address + mIndex] >> 8) & 0xFF) < IsoLevel) {
            [unroll] for(int j = 0; j < 6; j++){
                int3 nCoord = ((int3)mapCoord) + dp[j];
                uint light = SampleLumin(nCoord, cHandle);
                uint3 lightVec = uint3(light & 0x1F, (light >> 5) & 0x1F, (light >> 10) & 0x1F);  
                mC = max(mC, lightVec);
            } 
        }
        mC = max(mC - skipInc, (int3)SampleBaseLight(mapCoord, cHandle.address)); 
        uint light = (mC.x & 0x1F) | ((mC.y & 0x1F) << 5) | ((mC.z & 0x1F) << 10);

        uint address = cHandle.address + chunkLMOffset + mIndex/2;
        uint Illumin = _MemoryBuffer[address];
        uint nIllumin = (mIndex % 2 == 0) ? (Illumin & 0xFFFF8000) | light
                    :  (Illumin & 0x8000FFFF) | (light << 16);
        
        //This is thread-safe because the current thread is the only one
        //with exclusive access to the entire subchunk
        if(nIllumin != Illumin) {
            _MemoryBuffer[address] = nIllumin;
            isDirty |= 0x40;
        }

        uint flags = (nIllumin != Illumin) ? 0x1 : 0x0;  //Mark that the current subchunk is dirty
        flags |= any(mC > 1) ? 0x100 : 0x0; //Is Neighbor lit
        if(flags == 0) continue;
        if(sMCoord.x == subChunkSize - 1) isDirty |= flags;
        if(sMCoord.x == 0) isDirty |= flags << 1;
        if(sMCoord.y == subChunkSize - 1) isDirty |= flags << 2;
        if(sMCoord.y == 0) isDirty |= flags << 3;
        if(sMCoord.z == subChunkSize - 1) isDirty |= flags << 4;
        if(sMCoord.z == 0) isDirty |= flags << 5;
    }

    
    SubChunkOrigin /= subChunkSize;
    //Set Neighbor Propogation Flags
    uint SIndex = indexFromCoordManual(SubChunkOrigin, subChunksAxis);
    int address = cHandle.address + chunkLHOffset + SIndex/4; uint shift = (SIndex % 4) * 8;
    //Set the neighboring bits
    InterlockedAnd(_MemoryBuffer[address], ~(0x3F << shift));
    InterlockedOr(_MemoryBuffer[address], ((isDirty >> 8) & 0x3F) << shift);
    //Set the new neighboring bits as well as add dirty subchunk if not already
    if(isDirty & 0x40) AddDirtySubchunk(cHandle, SubChunkOrigin, 0x40);
    [unroll]for(int j = 0; j < 6; j++){
        if(!((isDirty >> j) & 0x1)) continue;
        int3 nCoord = ((int3)SubChunkOrigin) + dp[j];
        if(all(nCoord >= 0 && nCoord < subChunksAxis)){
            AddDirtySubchunk(cHandle, nCoord, 0x40);
        } else { 
            AddDirtyNeighboringChunkSubChunks(cHandle.CCoord, nCoord, skipInc, 0x4000 | (j/2));
        }
    }
}