// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/Resources/TerrainGeneration/SurfaceChunk/BiomeSampler.hlsl"
#include "Assets/Resources/Utility/PerlinNoiseSampler.hlsl"
#include "Assets/Resources/Utility/GetIndex.hlsl"

uint continentalSampler;
uint erosionSampler;
uint PVSampler;
uint squashSampler;
uint atmosphereSampler;
uint humiditySampler;

float continentalHeight;
float squashHeight;
float PVHeight;

float heightOffset;

struct surfData{
    float terrain;
    float squash;
    float atmosphere;
    int biome;
};

RWStructuredBuffer<surfData> surfMap;

const static int numThreads = 8;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis) {
        return;
    }

    uint index = indexFromCoord2D(id.x, id.y);

    int3 pos3D = int3(id.x, 0, id.y);

    float continentalRaw = GetRawNoise(pos3D, continentalSampler);
    float erosionRaw = GetRawNoise(pos3D, erosionSampler);
    float PVRaw = GetRawNoise(pos3D, PVSampler);
    float squashRaw = GetRawNoise(pos3D, squashSampler);
    float atmosphereRaw = GetRawNoise(pos3D, atmosphereSampler);
    float humidityRaw = GetRawNoise(pos3D, humiditySampler);
    float rawMaps[6] = {continentalRaw, erosionRaw, PVRaw, squashRaw, atmosphereRaw, humidityRaw};

    float continentalNoise = interpolateValue(continentalRaw, continentalSampler) * continentalHeight;
    float erosionNoise = interpolateValue(erosionRaw, erosionSampler);
    float PVNoise = interpolateValue(PVRaw, PVSampler) * PVHeight;
    float squashNoise = interpolateValue(squashRaw, squashSampler) * squashHeight;
    float atmosphereNoise = interpolateValue(atmosphereRaw, atmosphereSampler);
    float humidityNoise = interpolateValue(humidityRaw, humiditySampler);

    surfData data;
    data.terrain = continentalNoise + erosionNoise * PVNoise + heightOffset;
    data.squash = squashNoise;
    data.atmosphere = atmosphereNoise;
    data.biome = GetBiome(rawMaps);

    surfMap[index] = data;
}
