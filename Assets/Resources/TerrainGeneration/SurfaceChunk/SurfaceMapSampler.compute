// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/Resources/TerrainGeneration/SurfaceChunk/BiomeSampler.hlsl"
#include "Assets/Resources/Utility/PerlinNoiseSampler.hlsl"
#include "Assets/Resources/Utility/GetIndex.hlsl"
const static float precisionOffset = 1000.0f;

uint continentalSampler;
uint PVSampler;
uint erosionSampler;
uint squashSampler;
uint atmosphereSampler;
uint humiditySampler;

float maxTerrainHeight;
float heightInfluence;
float squashHeight;

float heightOffset;

struct surfData{
    float terrain;
    float squash;
    float atmosphere;
    int biome;
};

RWStructuredBuffer<surfData> surfMap;

const static int numThreads = 8;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis) {
        return;
    }

    uint index = indexFromCoord2D(id.x, id.y);

    int3 pos3D = int3(id.x, 0, id.y);

    float rawMaps[6];
    rawMaps[0] = GetRawNoise(pos3D, PVSampler);
    rawMaps[1] = GetRawNoise(pos3D, continentalSampler);
    rawMaps[2] = GetRawNoise(pos3D, erosionSampler);
    rawMaps[3] = GetRawNoise(pos3D, squashSampler);
    rawMaps[4] = GetRawNoise(pos3D, atmosphereSampler);
    rawMaps[5] = GetRawNoise(pos3D, humiditySampler);

    float PVNoise = interpolateValue(rawMaps[0], PVSampler) * precisionOffset;
    float continentalNoise = interpolateValue(rawMaps[1], continentalSampler) * precisionOffset;
    float erosionNoise = interpolateValue(rawMaps[2], erosionSampler);
    float squashNoise = interpolateValue(rawMaps[3], squashSampler) * precisionOffset;
    float atmosphereNoise = interpolateValue(rawMaps[4], atmosphereSampler);
    float humidityNoise = interpolateValue(rawMaps[5], humiditySampler);

    surfData data;
    data.terrain = (continentalNoise * (1 - heightInfluence) + erosionNoise * PVNoise * heightInfluence) * (maxTerrainHeight / precisionOffset) + heightOffset;
    data.squash = squashNoise * (squashHeight / precisionOffset);
    data.atmosphere = atmosphereNoise;

    rawMaps[0] = (data.terrain - heightOffset) / maxTerrainHeight;
    data.biome = GetBiome(rawMaps);

    surfMap[index] = data;
}
