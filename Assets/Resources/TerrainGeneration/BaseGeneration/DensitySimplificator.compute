// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Simplify
#pragma multi_compile _ USE_INT

const static int numThreads = 8;

uint indexFromCoord(uint x, uint y, uint z, float pointsPerAxis) {
    return x * pointsPerAxis * pointsPerAxis + y * pointsPerAxis + z;
}

uint meshSkipInc;
uint totalPointsPerAxis;
uint pointsPerAxis;

struct mapData{
    float density;
    int material;
};

StructuredBuffer<mapData> points_full;
RWStructuredBuffer<mapData> points;

[numthreads(numThreads,numThreads,numThreads)]
void Simplify (uint3 id : SV_DispatchThreadID)
{
    uint3 fullID = id * meshSkipInc;
    if(fullID.x >= totalPointsPerAxis || fullID.y >= totalPointsPerAxis || fullID.z >= totalPointsPerAxis)
        return;

    uint fullIndex = indexFromCoord(fullID.x, fullID.y, fullID.z, totalPointsPerAxis);
    uint index = indexFromCoord(id.x, id.y, id.z, pointsPerAxis);
    points[index] = points_full[fullIndex];
}
