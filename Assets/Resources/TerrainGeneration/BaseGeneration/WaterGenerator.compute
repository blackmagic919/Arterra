// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "Assets/Resources/Utility/GetIndex.hlsl"
const static int numThreads = 8;
const static uint SURF_STRIDE_4BYTE = 4;

RWStructuredBuffer<float> densityMap;
RWStructuredBuffer<int> materialMap;

StructuredBuffer<uint> _SurfMemoryBuffer;
StructuredBuffer<uint> _SurfAddressDict;
uint surfAddress;
uint meshSkipInc;

struct surfData{
    float terrain;
    float squash;
    float atmosphere;
    int biome;
};

surfData ReadSurfData(uint2 coord){
    uint2 fullCoord = coord * meshSkipInc;
    uint numPointsAxisFull = (numPointsPerAxis - 1) * meshSkipInc + 1;
    uint address = _SurfAddressDict[surfAddress] + indexFromCoord2DManual(fullCoord, numPointsAxisFull) * SURF_STRIDE_4BYTE;
    
    surfData data;
    data.terrain = asfloat(_SurfMemoryBuffer[address]);
    data.squash = asfloat(_SurfMemoryBuffer[address + 1]);
    data.atmosphere = asfloat(_SurfMemoryBuffer[address + 2]);
    data.biome = asint(_SurfMemoryBuffer[address + 3]);
    return data;
}

[numthreads(numThreads,numThreads,numThreads)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
}
