#pragma kernel Identify
#pragma kernel Check
#pragma kernel Prune

#include "Assets/Resources/Utility/RotationTables.hlsl"
#include "Assets/Resources/TerrainGeneration/Structures/StructIDSettings.hlsl"
#include "Assets/Resources/TerrainGeneration/Structures/BiomeGenerator.hlsl"
#include "Assets/Resources/TerrainGeneration/Structures/TerrainAnalyzer.hlsl"

const static int numThreads = 256;

struct settings{ 
    uint3 size;
    int minimumLOD;
    uint randThetaRot;
    uint randPhiRot;
};

struct density{
    int lowerLimit;
    int upperLimit;
    int center;

    float multiplier;
    float power;
};

struct biomeStructure{
    density verticalPref;
    float frequency;
    uint structIndex;
};

struct structInfo{
    float3 position;
    uint LoD; 
};

struct structureData{
    float3 structurePos;
    uint structureIndex;
    uint2 rotation;
};

struct checkData{
    float3 position;
    uint value;
};

struct checkInfo{
    uint checkIndex;
    uint structureIndex;
};

// Global references
StructuredBuffer<uint> _BiomeStructurePrefix; //Gets range of details for biome
StructuredBuffer<biomeStructure> _BiomeStructureData; //biome generation data for structure

StructuredBuffer<uint2> _StructureIndexes;
StructuredBuffer<checkData> _StructureChecks;
StructuredBuffer<settings> _StructureSettings; //settings for structure
int3 CCoord;

//All 3 of these buffers are the same entity assigned with different bindings
StructuredBuffer<structInfo> structurePlan;
RWStructuredBuffer<checkInfo> structureChecks;
RWStructuredBuffer<structureData> genStructures;
uint bSTART_plan;
uint bSTART_check;
uint bSTART_struct;
uint bSTART_prune;

RWStructuredBuffer<uint> counter;
uint bCOUNTER_plan;
uint bCOUNTER_check;
uint bCOUNTER_struct;
uint bCOUNTER_prune;

float random(float seed){
    float hash = frac(sin(seed) * 43758.5453);
    return frac(hash * seed);
}


float getDensity(biomeStructure structure, float y){ //Same as in C#
    density structVertPref = structure.verticalPref; //copy
    float height = clamp(y, structVertPref.lowerLimit, structVertPref.upperLimit);
    float percent = y > structVertPref.center ?
                1-invLerp(structVertPref.center, structVertPref.upperLimit, y) :
                invLerp(structVertPref.lowerLimit, structVertPref.center, y);
    return pow(abs(percent), structVertPref.power) * structVertPref.multiplier;
}

int BinSearchStructures(uint startIndex, uint arraySize, uint searchLoD) //Returns smallest LoD structure closest to it
{
    int low = startIndex;
    int high = startIndex + (arraySize - 1);
    int ret = -1; //Not found yet

    while (low <= high)
    {
        int mid = ((uint)low + (uint)high) / 2; //so it stops complaining about int division
        uint structLoD = _StructureSettings[_BiomeStructureData[mid].structIndex].minimumLOD;

        if (structLoD == searchLoD)
            return mid;
        else if (structLoD < searchLoD)
        {
            ret = mid;
            low = mid + 1;
        }
        else
            high = mid - 1;
    }
    return ret;
}


int determineStructure(uint LoD, int biome, float seed, float yPos){
    //Determine Structure
    uint biomeStart = _BiomeStructurePrefix[biome];
    uint biomeLength = _BiomeStructurePrefix[biome+1] - biomeStart;

    int structureIndex = BinSearchStructures(biomeStart, biomeLength, LoD);

    //Allow frequency control(if there are multiple of same LoD)
    //Allowing to try other structures if fail allows better utilization of limited structure points
    //Because of this, each frequency isn't fixed, but multiplicative, however, it allows for more structures for less cost
    while(structureIndex >= (int)biomeStart){
        biomeStructure currentStructure = _BiomeStructureData[structureIndex];
        if(currentStructure.frequency > seed && getDensity(currentStructure, yPos) > random(seed))
            break;
        seed = random(random(seed));
        structureIndex--;
    }

    return structureIndex;
}

[numthreads(numThreads,1,1)]
void Identify (uint3 id : SV_DispatchThreadID)
{
    //Note, operations are better if ordered from less expensive to more
    if(id.x >= counter[bCOUNTER_plan])
        return;
    
    structInfo structPlan = structurePlan[id.x + bSTART_plan];

//IDENTIFY STRUCTURE
    int structBiome = SampleBiome(structPlan.position);

    //This is what makes this function deterministic, pointCoord is same no matter which chunk samples the poin
    float3 pointCoord = structPlan.position + (CCoord - 0.5f) * chunkSize; 
    float seedStruct = random(dot(pointCoord, float3(456.7, 789.2, 123.4))); 
    int structureIndex = determineStructure(structPlan.LoD, structBiome, seedStruct, pointCoord.y);

    //No structure found
    if(structureIndex < (int)_BiomeStructurePrefix[structBiome])
        return;
    
    structureIndex = _BiomeStructureData[structureIndex].structIndex;
    settings structureSettings = _StructureSettings[structureIndex];

    //Determine if it Intersects with current generating chunk
    float3 origin = structPlan.position; //structure origin
    uint rotTheta = 0; uint rotPhi = 0;
    float seedRot = random(seedStruct * 2); 

    if(structureSettings.randThetaRot != 0) rotTheta = uint(seedRot * 4); //0 -> 3
    seedRot = random(seedRot);
    if(structureSettings.randPhiRot != 0) rotPhi = uint(seedRot * 3); //0 -> 2

    float3x3 rotMatrix = RotationLookupTable[rotTheta][rotPhi];
    float3 length = mul(rotMatrix, structureSettings.size);

    //If doesn't intersect
    if(any(origin + abs(length) < 0)) 
        return;
    
//ADD STRUCTURE
    structureData newStructure;
    newStructure.structurePos = structPlan.position;
    newStructure.structureIndex = structureIndex;
    newStructure.rotation = uint2(rotTheta, rotPhi);

    int appendInd = 0;
    InterlockedAdd(counter[bCOUNTER_struct], 1, appendInd);
    genStructures[appendInd + bSTART_struct] = newStructure;

//ADD STRUCTURE CHECKS
    checkInfo newCheck;
    newCheck.structureIndex = appendInd;
    
    uint checkStart = _StructureIndexes[structureIndex].y;
    uint checkEnd = _StructureIndexes[structureIndex+1].y;

    for(uint i = checkStart; i < checkEnd; i++){
        newCheck.checkIndex = i;
        InterlockedAdd(counter[bCOUNTER_check], 1, appendInd);
        structureChecks[appendInd + bSTART_check] = newCheck;
    }
}

//Process structure checks
[numthreads(numThreads,1,1)]
void Check (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= counter[bCOUNTER_check])
        return;
    
    checkInfo check = structureChecks[id.x + bSTART_check];
    structureData structure = genStructures[check.structureIndex + bSTART_struct];

    if(structure.structureIndex == asuint(-1)) return; //some other thread already invalidated this structure
    settings structureSettings = _StructureSettings[structure.structureIndex];

    //Origin is always located at the least point, so there is one consistent direction of generation
    float3x3 rotMatrix = RotationLookupTable[structure.rotation.x][structure.rotation.y];
    float3 length = mul(rotMatrix, structureSettings.size);
    float3 newOrigin = min(length, 0);

    checkData data = _StructureChecks[check.checkIndex];
    float3 rotatedPos = mul(rotMatrix, data.position);
    float3 transformedPos = rotatedPos - newOrigin;

    float3 checkPosition = transformedPos + structure.structurePos;
    if(SampleTerrain(checkPosition) != (data.value != 0)) genStructures[check.structureIndex + bSTART_struct].structureIndex = asuint(-1);
}

[numthreads(numThreads,1,1)]
void Prune(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= counter[bCOUNTER_struct])
        return;

    structureData structure = genStructures[id.x + bSTART_struct];
    if(structure.structureIndex == asuint(-1)) return;

    uint appendInd = 0;
    InterlockedAdd(counter[bCOUNTER_prune], 1, appendInd);
    genStructures[appendInd + bSTART_prune] = structure;
}