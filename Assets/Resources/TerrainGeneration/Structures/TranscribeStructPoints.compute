// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

const static uint numThreads = 64;
const static uint POINT_STRIDE_4BYTES = 3 + 1 + 2;

struct structureInfo{
    float3 structurePos;
    uint structureIndex;
    uint2 rotation;
};

RWStructuredBuffer<uint> _MemoryBuffer;
StructuredBuffer<uint> _AddressDict;
uint addressIndex;

StructuredBuffer<structureInfo> structPoints;
StructuredBuffer<uint> numStructPoints;


[numthreads(numThreads,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(_AddressDict[addressIndex] == 0) //Invalid
        return;

    if(id.x >= numStructPoints[0])
        return;

    structureInfo structPoint = structPoints[id.x];
    uint pointAddress = _AddressDict[addressIndex] + id.x * POINT_STRIDE_4BYTES;

    _MemoryBuffer[pointAddress] = asuint(structPoint.structurePos.x);
    _MemoryBuffer[pointAddress + 1] = asuint(structPoint.structurePos.y);
    _MemoryBuffer[pointAddress + 2] = asuint(structPoint.structurePos.z);

    _MemoryBuffer[pointAddress + 3] = asuint(structPoint.structureIndex);

    _MemoryBuffer[pointAddress + 4] = asuint(structPoint.rotation.x);
    _MemoryBuffer[pointAddress + 5] = asuint(structPoint.rotation.y);

}
