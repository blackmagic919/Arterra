// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Terrain

#include "Assets/Scripts/TerrainGeneration/ComputeShaders/Includes/PerlinNoiseGenerator.hlsl"

const static int numThreads = 8;
const static int Epsilon = 0.0001;
const static float FalloffFactor = 5;

struct check{
    uint index;
    float3 position;
    bool value;
};

StructuredBuffer<uint> numPoints;
StructuredBuffer<check> checks;
StructuredBuffer<float> base;
StructuredBuffer<float> heights;
StructuredBuffer<float> squash;
float chunkYOrigin;
float IsoLevel;

RWStructuredBuffer<float> results;

[numthreads(numThreads,1,1)]
void Terrain (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= numPoints[0])
        return;

    float underground = base[id.x];
    float squashHeight = squash[id.x];
    float terrainHeight = heights[id.x];
    float actualHeight = checks[id.x].position.y + chunkYOrigin;

    float terrainFactor = clamp((terrainHeight - actualHeight) / (squashHeight + Epsilon), 0, 1) * (1-IsoLevel) + IsoLevel;
    float atmosphereFactor = exp(-max(actualHeight - terrainHeight, 0) * FalloffFactor);

    results[id.x] = underground * terrainFactor * atmosphereFactor;
}
