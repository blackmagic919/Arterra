// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Terrain

#include "/Includes/PerlinNoiseGenerator.compute"

const static int numThreads = 8;
uint numPoints;
StructuredBuffer<float3> CheckPoints;
RWStructuredBuffer<float> Results;
float offsetY;
float depth;
float IsoLevel;


[numthreads(numThreads,1,1)]
void Terrain (uint3 id : SV_DispatchThreadID)
{
    if(id.x > numPoints)
        return;

    float3 position = CheckPoints[id.x];

    uint y = position.y * meshSkipInc;
    float halfHeight = chunkSize / 2;

    float underground = Results[id.x];
    float surface = GetNoise(position);
    
    float actualHeight = y - halfHeight + offsetY;
    float clampedHeight = clamp(actualHeight, (-1) * depth, depth);
    float disToSurface = (surface * depth + clampedHeight) / depth;

    Results[id.x] = min(clamp(((-1) * disToSurface + IsoLevel), 0, 1), underground);
}
