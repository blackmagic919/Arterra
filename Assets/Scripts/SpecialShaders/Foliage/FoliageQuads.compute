// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main
#include "Assets/Resources/Compute/GeoShader/VertexPacker.hlsl"

const static int numThreads = 256;

struct Quad {
    float3 topLeft;
    float3 topRight;
    float3 bottomLeft;
    float3 bottomRight;
};

struct SourceVertex{
    float3 positionOS;
    float3 normalOS;
    int2 material; 
};

struct DrawTriangle{
    uint2 vertices[3];
};

StructuredBuffer<SourceVertex> SourceVertices;
StructuredBuffer<uint3> SourceTriangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

RWStructuredBuffer<uint> counters;
StructuredBuffer<uint> BaseTriangles;
RWStructuredBuffer<DrawTriangle> DrawTriangles;
int bSTART_base;
int bCOUNT_base;
int bSTART_oGeo;
int bCOUNT_oGeo;

float _QuadSize;
float _InflationFactor;


uint2 InitializeDrawVertex(float3 positionOS, float3 normalOS, uint2 uv){

    uint2 data = PackVertices(positionOS, normalOS);
    data.x = data.x | uv.x << 30 | uv.y << 31;

    return data;
}


float3 GetTriangleCenter(float3 a, float3 b, float3 c) {
    return (a + b + c) / 3.0;
}

float3 random(float3 st)
{
    st = float3(dot(st, float3(127.1, 311.7, 531.5)),
                dot(st, float3(269.5, 183.3, 246.1)),
                dot(st, float3(419.2, 371.9, 619.8)));
    return -1.0 + 2.0 * frac(sin(st) * 43758.5453123);
}

Quad GetQuad(float3 center, float3 right, float3 up){
    Quad quad = (Quad)0;
    quad.topLeft = center - right * (_QuadSize / 2.0) + up * (_QuadSize / 2.0);
    quad.topRight = center + right * (_QuadSize / 2.0) + up * (_QuadSize / 2.0);
    quad.bottomLeft = center - right * (_QuadSize / 2.0) - up * (_QuadSize / 2.0);
    quad.bottomRight = center + right * (_QuadSize / 2.0) - up * (_QuadSize / 2.0);

    return quad;
}

void AppendTri(DrawTriangle tri){
    int appendInd = 0;
    InterlockedAdd(counters[bCOUNT_oGeo], 1, appendInd);
    DrawTriangles[bSTART_oGeo + appendInd] = tri;
}

void AppendQuad(Quad quad, float3 normalOS){
    //Bottom triangle
    DrawTriangle lowerTri = (DrawTriangle)0;
    lowerTri.vertices[0] = InitializeDrawVertex(quad.topLeft + _InflationFactor*normalOS, normalOS, uint2(0, 1));
    lowerTri.vertices[2] = InitializeDrawVertex(quad.bottomLeft + _InflationFactor*normalOS, normalOS, uint2(0, 0));
    lowerTri.vertices[1] = InitializeDrawVertex(quad.bottomRight + _InflationFactor*normalOS, normalOS, uint2(1, 0)); //Add this first because clockwise winding
    AppendTri(lowerTri);
    
    //Top triangle
    DrawTriangle topTri = (DrawTriangle)0;
    topTri.vertices[0] = InitializeDrawVertex(quad.topLeft + _InflationFactor*normalOS, normalOS, uint2(0, 1));
    topTri.vertices[2] = InitializeDrawVertex(quad.bottomRight + _InflationFactor*normalOS, normalOS, uint2(1, 0));
    topTri.vertices[1] = InitializeDrawVertex(quad.topRight + _InflationFactor*normalOS, normalOS, uint2(1, 1));
    AppendTri(topTri);
}

void CreateQuadIntersects(float3 center, float3 normalOS) {
    float3 forward = normalize(normalOS);
    float3 right = normalize(float3(-forward.y, forward.x, forward.z)); //90 deg rotation in 2 axis
    float3 up = cross(forward, right);

    AppendQuad(GetQuad(center, forward, right), normalOS);
    AppendQuad(GetQuad(center, right, up), normalOS);
    AppendQuad(GetQuad(center, up, forward), normalOS);
}

[numthreads(numThreads,1,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    uint startIndex = counters[bCOUNT_base];
    uint numSourceTriangles = counters[bCOUNT_base+1] - startIndex;
    if(id.x >= numSourceTriangles)
        return;

    uint triIndex = BaseTriangles[bSTART_base + startIndex + id.x];
    uint3 sourceTri = SourceTriangles[_AddressDict[triAddress].y + triIndex];

    SourceVertex inputs[3];
    inputs[0] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.x];
    inputs[1] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.y];
    inputs[2] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.z];

    float3 center = GetTriangleCenter(inputs[0].positionOS, inputs[1].positionOS, inputs[2].positionOS);
    float3 normal = GetTriangleCenter(inputs[0].normalOS, inputs[1].normalOS, inputs[2].normalOS);// If not want to inherit -> normalize(_CameraPosition - center);
    CreateQuadIntersects(center, normal);
  
}