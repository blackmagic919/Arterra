// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main
const static int numThreads = 256;

struct SourceVertex{
    float3 positionOS;
    float3 normalOS;
    int2 material; 
};

struct DrawVertex{
    float3 positionWS;
    float3 normalWS;
    float2 uv;
};

struct DrawTriangle{
    DrawVertex vertices[3];
};

struct matTerrain{
    float4 baseColor;
    float baseTextureScale;
    float baseColorStrength;
    int geoShaderInd;
};

StructuredBuffer<matTerrain> _MatTerrainData;
int geoInd;

StructuredBuffer<SourceVertex> SourceVertices;
StructuredBuffer<uint3> SourceTriangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

RWStructuredBuffer<uint> counters;
StructuredBuffer<uint> BaseTriangles;
RWStructuredBuffer<DrawTriangle> DrawTriangles;
int bSTART_base;
int bCOUNT_base;
int bSTART_oGeo;
int bCOUNT_oGeo;

uint tesselFactor;
float4x4 _LocalToWorld;

DrawVertex MakeBaseDrawVertex(SourceVertex v){
    DrawVertex o = (DrawVertex)0;
    o.positionWS = mul(_LocalToWorld, float4(v.positionOS, 1)).xyz;
    o.normalWS = mul(_LocalToWorld, float4(v.normalOS, 0)).xyz;
    o.uv = _MatTerrainData[v.material.x].geoShaderInd == geoInd ? 1 : 0;
    return o;
}

DrawVertex Interpolate(DrawVertex a, DrawVertex b, float t){
    DrawVertex v = (DrawVertex)0;
    v.positionWS = a.positionWS * (1 - t) + b.positionWS * t;
    v.normalWS = a.normalWS * (1 - t) + b.normalWS * t;
    v.uv = a.uv * (1 - t) + b.uv * t;
    return v;
}

DrawVertex BlendCenter(DrawTriangle base){
    DrawVertex v = (DrawVertex)0;
    v.positionWS = (base.vertices[0].positionWS + base.vertices[1].positionWS + base.vertices[2].positionWS) / 3;
    v.normalWS = (base.vertices[0].normalWS + base.vertices[1].normalWS + base.vertices[2].normalWS) / 3;
    v.uv = (base.vertices[0].uv + base.vertices[1].uv + base.vertices[2].uv) / 3;
    return v;
}

DrawTriangle GetBaseTriangle(DrawTriangle base, float tessel){
    DrawTriangle tri = (DrawTriangle)0;
    
    DrawVertex center = BlendCenter(base);
    tri.vertices[0] = Interpolate(base.vertices[0], center, (1-tessel));
    tri.vertices[1] = Interpolate(base.vertices[1], center, (1-tessel));
    tri.vertices[2] = Interpolate(base.vertices[2], center, (1-tessel));
    return tri;
}

void AppendTri(DrawTriangle tri){
    int appendInd = 0;
    InterlockedAdd(counters[bCOUNT_oGeo], 1, appendInd);
    DrawTriangles[bSTART_oGeo + appendInd] = tri;
}


//Based off the diagram described here https://www.khronos.org/opengl/wiki/Tessellation
void TesselateTri(DrawTriangle base){
    DrawTriangle tri; 
    int nTessel; int oTessel; 
    for(nTessel = tesselFactor - 2, oTessel = tesselFactor; nTessel >= 0; nTessel -= 2){
        DrawTriangle nBase = GetBaseTriangle(base, ((float)nTessel / tesselFactor));
        [unroll]for(uint v = 0; v < 3; v++){
            DrawVertex a = base.vertices[v]; DrawVertex b = base.vertices[(v+1)%3];
            DrawVertex c = nBase.vertices[v]; DrawVertex d = nBase.vertices[(v+1)%3];
            for(int edgePt = 0; edgePt < nTessel; edgePt++){
                tri.vertices[2] = Interpolate(a, b, ((float)(edgePt + 1) / (oTessel)));
                tri.vertices[1] = Interpolate(c, d, ((float)(edgePt + 1) / nTessel));
                tri.vertices[0] = Interpolate(a, b, ((float)(edgePt + 2) / (oTessel)));
                AppendTri(tri);

                tri.vertices[0] = tri.vertices[1];
                tri.vertices[1] = Interpolate(c, d, (float)edgePt / nTessel);
                AppendTri(tri);
            }

            tri.vertices[2] = a;
            tri.vertices[1] = c;
            tri.vertices[0] = Interpolate(a, b, (1.0f/(oTessel)));;
            AppendTri(tri);

            tri.vertices[2] = Interpolate(a, b, ((float)nTessel + 1) / (oTessel));
            tri.vertices[1] = d;
            tri.vertices[0] = b;
            AppendTri(tri);
        }

        base = nBase;
        oTessel = nTessel;
    }

    if(nTessel == -1) AppendTri(base);
}


[numthreads(numThreads,1,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    uint startIndex = counters[bCOUNT_base];
    uint numSourceTriangles = counters[bCOUNT_base+1] - startIndex;
    if(id.x >= numSourceTriangles) return;//

    uint triIndex = BaseTriangles[bSTART_base + startIndex + id.x];
    uint3 sourceTri = SourceTriangles[_AddressDict[triAddress].y + triIndex];
    
    DrawTriangle tri;
    tri.vertices[0] = MakeBaseDrawVertex(SourceVertices[_AddressDict[vertAddress].y + sourceTri.x]);
    tri.vertices[1] = MakeBaseDrawVertex(SourceVertices[_AddressDict[vertAddress].y + sourceTri.y]);
    tri.vertices[2] = MakeBaseDrawVertex(SourceVertices[_AddressDict[vertAddress].y + sourceTri.z]);

    TesselateTri(tri);
}
