// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Main

const static int numThreads = 256;
#include "Assets/Resources/GeoShader/VertexPacker.hlsl"


struct SourceVertex{
    float3 positionOS;
    float3 normalOS;
    int2 material; 
};


struct DrawTriangle{
    uint2 vertices[3];
};


StructuredBuffer<SourceVertex> SourceVertices;
StructuredBuffer<uint3> SourceTriangles;
StructuredBuffer<uint2> _AddressDict;
uint vertAddress;
uint triAddress;

RWStructuredBuffer<uint> counters;
StructuredBuffer<uint> BaseTriangles;
RWStructuredBuffer<DrawTriangle> DrawTriangles;
int bSTART_base;
int bCOUNT_base;
int bSTART_oGeo;
int bCOUNT_oGeo;

float _TotalHeight;
int _MaxLayers;

uint2 ExtrudeVertex(SourceVertex v, int layerIndex){
    float height = (float)layerIndex / _MaxLayers;
    uint2 data = PackVertices(v.positionOS + v.normalOS * (height * _TotalHeight), v.normalOS);

    uint layerHeight = clamp(height * 15, 0, 15);
    data.x |= (layerHeight & 0x3) << 30;
    data.y |= (layerHeight & 0xC) << 28;

    return data;
}

[numthreads(numThreads, 1, 1)]
void Main(uint3 id : SV_DispatchThreadID){

    uint startIndex = counters[bCOUNT_base];
    uint numSourceTriangles = counters[bCOUNT_base+1] - startIndex;
    if(id.x >= numSourceTriangles)
        return;

    uint triIndex = BaseTriangles[bSTART_base + startIndex + id.x];
    uint3 sourceTri = SourceTriangles[_AddressDict[triAddress].y + triIndex];

    SourceVertex inputs[3];
    inputs[0] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.x];
    inputs[1] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.y];
    inputs[2] = SourceVertices[_AddressDict[vertAddress].y + sourceTri.z];
    

    for(int i = 0; i < _MaxLayers; i++)
    {
        DrawTriangle tri = (DrawTriangle)0;
        [unroll] for(int p = 0; p < 3; p++){
            tri.vertices[p] = ExtrudeVertex(inputs[p], i);
        }

        int appendInd = 0;
        InterlockedAdd(counters[bCOUNT_oGeo], 1, appendInd);
        DrawTriangles[bSTART_oGeo + appendInd] = tri;
    }
}