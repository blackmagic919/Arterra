//10/20/24 -> So sad to see this go :(

//This logic is beyond me XD, spent a while thinking of how to implement this
//Slightly more efficient than ElementAt
public struct MaterialInventory{
    public Dictionary<uint, int> inventory;
    public int totalMaterialAmount;
    public int materialCapacity;
    public int selectedPos;
    public InvMat selected;
    [JsonIgnore]
    public MaterialDisplay Rendering;
    public struct MaterialDisplay{
        public RectTransform panelRectTransform;
        public Image inventoryMat;
        public ComputeBuffer buffer;
        [Range(0, 1)]
        public float size;
        public bool IsDirty;
    }

    public MaterialInventory(int capacity){
        inventory = new Dictionary<uint, int>();
        materialCapacity = capacity;
        totalMaterialAmount = 0;
        selectedPos = 0;
        selected = new InvMat{isNull = true};
        Rendering = new MaterialDisplay();
    }

    public uint[] GetInventoryKeys
    {
        get{
            uint[] keys = new uint[inventory.Count];
            inventory.Keys.CopyTo(keys, 0);
            return keys;
        }
    }

    public int[] GetInventoryValues
    {
        get
        {
            int[] values = new int[inventory.Count];
            inventory.Values.CopyTo(values, 0);
            return values;
        }
    }

    public readonly void Release() { Rendering.buffer?.Release(); }
    public void Initialize(GameObject materialBar)
    {
        Rendering.buffer = new ComputeBuffer(100, sizeof(int) + sizeof(float));
        // Get the RectTransform component of the UI panel.
        Rendering.panelRectTransform = materialBar.GetComponent<RectTransform>();
        Rendering.inventoryMat = materialBar.transform.GetChild(0).GetComponent<Image>();
        Rendering.inventoryMat.materialForRendering.SetBuffer("MainInventoryMaterial", Rendering.buffer);
        Rendering.IsDirty = true;
        Update();
    }
    public void Update() //DO NOT DO THIS IN ONENABLE, Shader is compiled later than OnEnabled is called
    {
        if(!Rendering.IsDirty) return;
        Rendering.IsDirty = false;

        Rendering.size = (float)totalMaterialAmount / materialCapacity;
        Rendering.panelRectTransform.transform.localScale = new Vector3(Rendering.size, 1, 1);

        int totalmaterials_M = inventory.Count;
        Rendering.buffer.SetData(MaterialData.GetInventoryData(this), 0, 0, totalmaterials_M);
        Rendering.inventoryMat.materialForRendering.SetInt("MainMaterialCount", totalmaterials_M);
        Rendering.inventoryMat.materialForRendering.SetInt("selectedMat", selected.material);
        Rendering.inventoryMat.materialForRendering.SetFloat("InventorySize", Rendering.size);
    }


    public void NextMaterial(){
        selectedPos++;
        selectedPos %= inventory.Count;
        selected = new InvMat{key = this.inventory.ElementAt(selectedPos).Key};
    }

    public void PreviousMaterial(){
        selectedPos--;
        if(selectedPos < 0) selectedPos = inventory.Count - 1;
        if(selectedPos >= 0) selected = new InvMat{key = this.inventory.ElementAt(selectedPos).Key};
        else selected.isNull = true;
    }

    public void ClearSmallMaterials(float threshold){
        uint[] keys = GetInventoryKeys;
        int[] values = GetInventoryValues;
        for(int i = 0; i < keys.Length; i++){
            if(values[i] < threshold){
                totalMaterialAmount -= values[i];
                inventory.Remove(keys[i]);
                if(selected.key == keys[i]) PreviousMaterial();
            }
        }
    }

    public int AddMaterialToInventory(InvMat materialIndex, int delta)
    {
        if(delta == 0) return 0;
        delta = Mathf.Min(totalMaterialAmount + delta, materialCapacity) - totalMaterialAmount;
        uint key = materialIndex.key;

        if (inventory.ContainsKey(key))
            inventory[key] += delta;
        else{
            inventory.Add(key, delta);
            if(selected.isNull) selected = materialIndex;
        }

        totalMaterialAmount += delta;
        return delta;
    }

    public int RemoveMaterialFromInventory(int delta)
    {
        if(delta == 0) return 0;
        delta = totalMaterialAmount - Mathf.Max(totalMaterialAmount - delta, 0);
        uint key = selected.key;

        if (inventory.ContainsKey(key)) {
            int amount = inventory[key];
            delta = amount - Mathf.Max(amount - delta, 0);
            inventory[key] -= delta;

            if (inventory[key] == 0){
                inventory.Remove(key);
                PreviousMaterial();
            }
        }
        else
            delta = 0;

        totalMaterialAmount -= delta;
        return delta;
    }

    public struct InvMat{
        public uint key;
        public int material {
            get => (int)(key & 0x7FFFFFFF);
            set => key = (uint)(value & 0x7FFFFFFF) | 0x80000000;
        }
        public bool isSolid {
            readonly get => (key & 0x80000000) != 0;
            set => key = value ? key | 0x80000000 : key & 0x7FFFFFFF;
        }

        public bool isNull{
            readonly get => key == 0xFFFFFFFF;
            set => key = value ? 0xFFFFFFFF : key;
        }
    }

    struct MaterialData
        {
            public uint index;
            public float percentage;

            public static MaterialData[] GetInventoryData(MaterialInventory inventory){
                uint[] indexes = inventory.GetInventoryKeys;
                int[] amounts = inventory.GetInventoryValues;
                int totalMaterials = inventory.inventory.Count;

                MaterialData[] materialInfo = new MaterialData[totalMaterials+1];
                materialInfo[0].percentage = 0;
                for (int i = 1; i <= totalMaterials; i++)
                {
                    materialInfo[i-1].index = indexes[i-1];
                    materialInfo[i].percentage = ((float)amounts[i-1]) / inventory.totalMaterialAmount + materialInfo[i - 1].percentage;
                }
                return materialInfo;
            }
        }
}
