// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CreateTexture

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

const static int maxMaterials = 8;
const static int numThreadsAxis = 8;
const static float epsilon = 1.0f/255.0f; //necessary to shift it just over

int materialCount;
int maxMaterialCount;
StructuredBuffer<int> inventoryMaterialIndexes;
StructuredBuffer<float> inventoryMaterialPercents;

float BinarySearch(float key, uint arraySize) {
    uint left = 0;
    uint right = arraySize - 1;
    uint closestIndex = 0;

    while (left <= right) { 
        uint mid = (left + right) / 2;

        if (inventoryMaterialPercents[mid] <= key) {
            closestIndex = mid;
            left = mid + 1;
        } else {
            if(right == 0)//as using uint, right = -1 = uint.max
                return closestIndex;
            right = mid - 1;
        }
    }
               
    return closestIndex;
}

[numthreads(numThreadsAxis, numThreadsAxis, 1)]
void CreateTexture (uint3 id : SV_DispatchThreadID)
{
    uint width; uint height;
    Result.GetDimensions(width, height);

    if(id.x > width || id.y > height)
        return;

    float percentage = ((float)id.x / (float)width);
    float materialIndex = inventoryMaterialIndexes[BinarySearch(percentage, materialCount)] / (float)maxMaterialCount + epsilon;

    Result[id.xy] = float4(0, 0, 0, materialIndex);
}
